{\rtf1\adeflang1025\ansi\ansicpg1252\uc1\adeff31507\deff0\stshfdbch31505\stshfloch31506\stshfhich31506\stshfbi31507\deflang1033\deflangfe1033\themelang1033\themelangfe0\themelangcs0{\fonttbl{\f0\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f2\fbidi \fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f2\fbidi \fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\flomajor\f31500\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\fdbmajor\f31501\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\fhimajor\f31502\fbidi \fswiss\fcharset0\fprq2{\*\panose 020f0302020204030204}Calibri Light;}
{\fbimajor\f31503\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\flominor\f31504\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\fdbminor\f31505\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\fhiminor\f31506\fbidi \fswiss\fcharset0\fprq2{\*\panose 020f0502020204030204}Calibri;}
{\fbiminor\f31507\fbidi \froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f42\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\f43\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\f45\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\f46\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\f47\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f48\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\f49\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\f50\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\f62\fbidi \fmodern\fcharset238\fprq1 Courier New CE;}{\f63\fbidi \fmodern\fcharset204\fprq1 Courier New Cyr;}
{\f65\fbidi \fmodern\fcharset161\fprq1 Courier New Greek;}{\f66\fbidi \fmodern\fcharset162\fprq1 Courier New Tur;}{\f67\fbidi \fmodern\fcharset177\fprq1 Courier New (Hebrew);}{\f68\fbidi \fmodern\fcharset178\fprq1 Courier New (Arabic);}
{\f69\fbidi \fmodern\fcharset186\fprq1 Courier New Baltic;}{\f70\fbidi \fmodern\fcharset163\fprq1 Courier New (Vietnamese);}{\f62\fbidi \fmodern\fcharset238\fprq1 Courier New CE;}{\f63\fbidi \fmodern\fcharset204\fprq1 Courier New Cyr;}
{\f65\fbidi \fmodern\fcharset161\fprq1 Courier New Greek;}{\f66\fbidi \fmodern\fcharset162\fprq1 Courier New Tur;}{\f67\fbidi \fmodern\fcharset177\fprq1 Courier New (Hebrew);}{\f68\fbidi \fmodern\fcharset178\fprq1 Courier New (Arabic);}
{\f69\fbidi \fmodern\fcharset186\fprq1 Courier New Baltic;}{\f70\fbidi \fmodern\fcharset163\fprq1 Courier New (Vietnamese);}{\flomajor\f31508\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\flomajor\f31509\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\flomajor\f31511\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\flomajor\f31512\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}
{\flomajor\f31513\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\flomajor\f31514\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\flomajor\f31515\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}
{\flomajor\f31516\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fdbmajor\f31518\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fdbmajor\f31519\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\fdbmajor\f31521\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fdbmajor\f31522\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fdbmajor\f31523\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\fdbmajor\f31524\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fdbmajor\f31525\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fdbmajor\f31526\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}
{\fhimajor\f31528\fbidi \fswiss\fcharset238\fprq2 Calibri Light CE;}{\fhimajor\f31529\fbidi \fswiss\fcharset204\fprq2 Calibri Light Cyr;}{\fhimajor\f31531\fbidi \fswiss\fcharset161\fprq2 Calibri Light Greek;}
{\fhimajor\f31532\fbidi \fswiss\fcharset162\fprq2 Calibri Light Tur;}{\fhimajor\f31535\fbidi \fswiss\fcharset186\fprq2 Calibri Light Baltic;}{\fhimajor\f31536\fbidi \fswiss\fcharset163\fprq2 Calibri Light (Vietnamese);}
{\fbimajor\f31538\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fbimajor\f31539\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fbimajor\f31541\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}
{\fbimajor\f31542\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fbimajor\f31543\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fbimajor\f31544\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\fbimajor\f31545\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fbimajor\f31546\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\flominor\f31548\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\flominor\f31549\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\flominor\f31551\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\flominor\f31552\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}
{\flominor\f31553\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\flominor\f31554\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\flominor\f31555\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}
{\flominor\f31556\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}{\fdbminor\f31558\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}{\fdbminor\f31559\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}
{\fdbminor\f31561\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fdbminor\f31562\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}{\fdbminor\f31563\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\fdbminor\f31564\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fdbminor\f31565\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}{\fdbminor\f31566\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}
{\fhiminor\f31568\fbidi \fswiss\fcharset238\fprq2 Calibri CE;}{\fhiminor\f31569\fbidi \fswiss\fcharset204\fprq2 Calibri Cyr;}{\fhiminor\f31571\fbidi \fswiss\fcharset161\fprq2 Calibri Greek;}{\fhiminor\f31572\fbidi \fswiss\fcharset162\fprq2 Calibri Tur;}
{\fhiminor\f31575\fbidi \fswiss\fcharset186\fprq2 Calibri Baltic;}{\fhiminor\f31576\fbidi \fswiss\fcharset163\fprq2 Calibri (Vietnamese);}{\fbiminor\f31578\fbidi \froman\fcharset238\fprq2 Times New Roman CE;}
{\fbiminor\f31579\fbidi \froman\fcharset204\fprq2 Times New Roman Cyr;}{\fbiminor\f31581\fbidi \froman\fcharset161\fprq2 Times New Roman Greek;}{\fbiminor\f31582\fbidi \froman\fcharset162\fprq2 Times New Roman Tur;}
{\fbiminor\f31583\fbidi \froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\fbiminor\f31584\fbidi \froman\fcharset178\fprq2 Times New Roman (Arabic);}{\fbiminor\f31585\fbidi \froman\fcharset186\fprq2 Times New Roman Baltic;}
{\fbiminor\f31586\fbidi \froman\fcharset163\fprq2 Times New Roman (Vietnamese);}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;
\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\*\defchp 
\fs22\loch\af31506\hich\af31506\dbch\af31505 }{\*\defpap \ql \li0\ri0\sa160\sl259\slmult1\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 }\noqfpromote {\stylesheet{\ql \li0\ri0\sa160\sl259\slmult1
\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af31507\afs22\alang1025 \ltrch\fcs0 \fs22\lang1033\langfe1033\loch\f31506\hich\af31506\dbch\af31505\cgrid\langnp1033\langfenp1033 \snext0 \sqformat \spriority0 Normal;}
{\*\cs10 \additive \ssemihidden \sunhideused \spriority1 Default Paragraph Font;}{\*
\ts11\tsrowd\trftsWidthB3\trpaddl108\trpaddr108\trpaddfl3\trpaddft3\trpaddfb3\trpaddfr3\tblind0\tblindtype3\tsvertalt\tsbrdrt\tsbrdrl\tsbrdrb\tsbrdrr\tsbrdrdgl\tsbrdrdgr\tsbrdrh\tsbrdrv \ql \li0\ri0\sa160\sl259\slmult1
\widctlpar\wrapdefault\aspalpha\aspnum\faauto\adjustright\rin0\lin0\itap0 \rtlch\fcs1 \af31507\afs22\alang1025 \ltrch\fcs0 \fs22\lang1033\langfe1033\loch\f31506\hich\af31506\dbch\af31505\cgrid\langnp1033\langfenp1033 \snext11 \ssemihidden \sunhideused 
Normal Table;}}{\*\revtbl {Unknown;}}{\*\rsidtbl \rsid2501652\rsid16133657}{\mmathPr\mmathFont34\mbrkBin0\mbrkBinSub0\msmallFrac0\mdispDef1\mlMargin0\mrMargin0\mdefJc1\mwrapIndent1440\mintLim0\mnaryLim1}{\info{\author Alem Fitwi}{\operator Alem Fitwi}
{\creatim\yr2019\mo10\dy8\hr4\min31}{\revtim\yr2019\mo10\dy8\hr4\min32}{\printim\yr2019\mo10\dy8\hr4\min31}{\version2}{\edmins1}{\nofpages50}{\nofwords7662}{\nofchars43677}{\nofcharsws51237}{\vern85}}{\*\xmlnstbl {\xmlns1 http://schemas.microsoft.com/offi
ce/word/2003/wordml}}\paperw12240\paperh15840\margl1440\margr1440\margt1440\margb1440\gutter0\ltrsect 
\widowctrl\ftnbj\aenddoc\trackmoves0\trackformatting1\donotembedsysfont0\relyonvml0\donotembedlingdata1\grfdocevents0\validatexml0\showplaceholdtext0\ignoremixedcontent0\saveinvalidxml0\showxmlerrors0\horzdoc\dghspace120\dgvspace120\dghorigin1701
\dgvorigin1984\dghshow0\dgvshow3\jcompress\viewkind1\viewscale100\rsidroot16133657 \fet0{\*\wgrffmtfilter 2450}\ilfomacatclnup0\ltrpar \sectd \ltrsect\linex0\sectdefaultcl\sftnbj {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl2
\pnucltr\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang {\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang {\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl6
\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang 
{\pntxtb (}{\pntxta )}}\pard\plain \ltrpar\ql \li0\ri0\nowidctlpar\wrapdefault\faauto\rin0\lin0\itap0 \rtlch\fcs1 \af31507\afs22\alang1025 \ltrch\fcs0 \fs22\lang1033\langfe1033\loch\af31506\hich\af31506\dbch\af31505\cgrid\langnp1033\langfenp1033 {
\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid2501652 \hich\af2\dbch\af31505\loch\f2 100+ Python challenging programming exercises
\par 
\par \hich\af2\dbch\af31505\loch\f2 1.\tab Level description
\par \hich\af2\dbch\af31505\loch\f2 Level\tab Description
\par \hich\af2\dbch\af31505\loch\f2 Level 1\tab \hich\af2\dbch\af31505\loch\f2 
Beginner means someone who has just gone through an introductory Python course. He can solve some problems with 1 or 2 Python classes or functions. Normally, the answers could directly be found in the textbooks.
\par \hich\af2\dbch\af31505\loch\f2 Level 2\tab Intermediate means someone who has j\hich\af2\dbch\af31505\loch\f2 
ust learned Python, but already has a relatively strong programming background from before. He should be able to solve problems which may involve 3 or 3 Python classes or functions. The answers cannot be directly be found in the textbooks.
\par \hich\af2\dbch\af31505\loch\f2 Level 3\tab Advanced\hich\af2\dbch\af31505\loch\f2 
. He should use Python to solve more complex problem using more rich libraries functions and data structures and algorithms. He is supposed to solve the problem using several Python standard packages and advanced techniques.
\par 
\par \hich\af2\dbch\af31505\loch\f2 2.\tab Problem template
\par 
\par \hich\af2\dbch\af31505\loch\f2 #--------\hich\af2\dbch\af31505\loch\f2 --------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 Question
\par \hich\af2\dbch\af31505\loch\f2 Hints
\par \hich\af2\dbch\af31505\loch\f2 Solution
\par 
\par \hich\af2\dbch\af31505\loch\f2 3.\tab Questions
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 Question 1
\par \hich\af2\dbch\af31505\loch\f2 Level 1
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par \hich\af2\dbch\af31505\loch\f2 Write a program which will find all such numbers which are divisible by 7 but are not a multiple of 5,
\par \hich\af2\dbch\af31505\loch\f2 between\hich\af2\dbch\af31505\loch\f2  2000 and 3200 (both included).
\par \hich\af2\dbch\af31505\loch\f2 The numbers obtained should be printed in a comma-separated sequence on a single line.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints: 
\par \hich\af2\dbch\af31505\loch\f2 Consider use range(#begin, #end) method
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par \hich\af2\dbch\af31505\loch\f2 l=[]
\par \hich\af2\dbch\af31505\loch\f2 for i in range(2000, 3201):
\par \hich\af2\dbch\af31505\loch\f2     if (i%7==0) and (i%5!=0):
\par \hich\af2\dbch\af31505\loch\f2         l.append(str(i))
\par 
\par \hich\af2\dbch\af31505\loch\f2 print ','.join(l)
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 Question 2
\par \hich\af2\dbch\af31505\loch\f2 Level 1
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par \hich\af2\dbch\af31505\loch\f2 Write a program which can compute the factorial of a given numbers.
\par \hich\af2\dbch\af31505\loch\f2 The results should be print\hich\af2\dbch\af31505\loch\f2 ed in a comma-separated sequence on a single line.
\par \hich\af2\dbch\af31505\loch\f2 Suppose the following input is supplied to the program:
\par \hich\af2\dbch\af31505\loch\f2 8
\par \hich\af2\dbch\af31505\loch\f2 Then, the output should be:
\par \hich\af2\dbch\af31505\loch\f2 40320
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par \hich\af2\dbch\af31505\loch\f2 In case of input data being supplied to the question, it should be assumed to be a console input.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Soluti\hich\af2\dbch\af31505\loch\f2 on:
\par \hich\af2\dbch\af31505\loch\f2 def fact(x):
\par \hich\af2\dbch\af31505\loch\f2     if x == 0:
\par \hich\af2\dbch\af31505\loch\f2         return 1
\par \hich\af2\dbch\af31505\loch\f2     return x * fact(x - 1)
\par 
\par \hich\af2\dbch\af31505\loch\f2 x=int(raw_input())
\par \hich\af2\dbch\af31505\loch\f2 print fact(x)
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 Question 3
\par \hich\af2\dbch\af31505\loch\f2 Level 1
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par \hich\af2\dbch\af31505\loch\f2 With a given integral number n, write a program to generate a dictionary that contains (i, i*i) such that is an integral number between 1 and n (both included). and then the program should print the dictionary.
\par \hich\af2\dbch\af31505\loch\f2 Suppose the following input is supplied to th\hich\af2\dbch\af31505\loch\f2 e program:
\par \hich\af2\dbch\af31505\loch\f2 8
\par \hich\af2\dbch\af31505\loch\f2 Then, the output should be:
\par \{\hich\af2\dbch\af31505\loch\f2 1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64\}
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par \hich\af2\dbch\af31505\loch\f2 In case of input data being supplied to the question, it should be assumed to be a console input.
\par \hich\af2\dbch\af31505\loch\f2 Consider use dict()
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par \hich\af2\dbch\af31505\loch\f2 n=int(raw_input())
\par \hich\af2\dbch\af31505\loch\f2 d=dic\hich\af2\dbch\af31505\loch\f2 t()
\par \hich\af2\dbch\af31505\loch\f2 for i in range(1,n+1):
\par \hich\af2\dbch\af31505\loch\f2     d[i]=i*i
\par 
\par \hich\af2\dbch\af31505\loch\f2 print d
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 Question 4
\par \hich\af2\dbch\af31505\loch\f2 Level 1
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par \hich\af2\dbch\af31505\loch\f2 Write a program which accepts a sequence of comma-separated numbers from console and generate a list and a tuple which contains every number.
\par \hich\af2\dbch\af31505\loch\f2 Suppose the following input is supplied to the program:
\par \hich\af2\dbch\af31505\loch\f2 34,67,55,33,12,98
\par \hich\af2\dbch\af31505\loch\f2 Then, the output should be:
\par \hich\af2\dbch\af31505\loch\f2 ['34', '67',\hich\af2\dbch\af31505\loch\f2  '55', '33', '12', '98']
\par \hich\af2\dbch\af31505\loch\f2 ('34', '67', '55', '33', '12', '98')
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par \hich\af2\dbch\af31505\loch\f2 In case of input data being supplied to the question, it should be assumed to be a console input.
\par \hich\af2\dbch\af31505\loch\f2 tuple() method can convert list to tuple
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par \hich\af2\dbch\af31505\loch\f2 values=raw_input()
\par \hich\af2\dbch\af31505\loch\f2 l=values.split(",\hich\af2\dbch\af31505\loch\f2 ")
\par \hich\af2\dbch\af31505\loch\f2 t=tuple(l)
\par \hich\af2\dbch\af31505\loch\f2 print l
\par \hich\af2\dbch\af31505\loch\f2 print t
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 Question 5
\par \hich\af2\dbch\af31505\loch\f2 Level 1
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par \hich\af2\dbch\af31505\loch\f2 Define a class which has at least two methods:
\par \hich\af2\dbch\af31505\loch\f2 getString: to get a string from console input
\par \hich\af2\dbch\af31505\loch\f2 printString: to print the string in upper case.
\par \hich\af2\dbch\af31505\loch\f2 Also please include simple test function to test the class methods.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par \hich\af2\dbch\af31505\loch\f2 Use __init__ method to construct some parameters
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par \hich\af2\dbch\af31505\loch\f2 class InputOutString(object):
\par \hich\af2\dbch\af31505\loch\f2     def __init__(self):
\par \hich\af2\dbch\af31505\loch\f2         self.s = "\hich\af2\dbch\af31505\loch\f2 "
\par 
\par \hich\af2\dbch\af31505\loch\f2     def getString(self):
\par \hich\af2\dbch\af31505\loch\f2         self.s = raw_input()
\par 
\par \hich\af2\dbch\af31505\loch\f2     def printString(self):
\par \hich\af2\dbch\af31505\loch\f2         print self.s.upper()
\par 
\par \hich\af2\dbch\af31505\loch\f2 strObj = InputOutString()
\par \hich\af2\dbch\af31505\loch\f2 strObj.getString()
\par \hich\af2\dbch\af31505\loch\f2 strObj.printString()
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par 
\par \hich\af2\dbch\af31505\loch\f2 #------------------------------\hich\af2\dbch\af31505\loch\f2 ----------#
\par \hich\af2\dbch\af31505\loch\f2 Question 6
\par \hich\af2\dbch\af31505\loch\f2 Level 2
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par \hich\af2\dbch\af31505\loch\f2 Write a program that calculates and prints the value according to the given formula:
\par \hich\af2\dbch\af31505\loch\f2 Q = Square root of [(2 * C * D)/H]
\par \hich\af2\dbch\af31505\loch\f2 Following are the fixed values of C and H:
\par \hich\af2\dbch\af31505\loch\f2 C is 50. H is 30.
\par \hich\af2\dbch\af31505\loch\f2 D is the variable whose values should be input to your program in a comma-separated sequence.
\par \hich\af2\dbch\af31505\loch\f2 Example
\par \hich\af2\dbch\af31505\loch\f2 Let us assume the following comma separated input sequence is given to the program:
\par \hich\af2\dbch\af31505\loch\f2 100,150,180
\par \hich\af2\dbch\af31505\loch\f2 The output of the program should be:
\par \hich\af2\dbch\af31505\loch\f2 18,22,24
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par \hich\af2\dbch\af31505\loch\f2 If t\hich\af2\dbch\af31505\loch\f2 he output received is in decimal form, it should be rounded off to its nearest value (for example, if the output received is 26.0, it should be printed as 26)
\par \hich\af2\dbch\af31505\loch\f2 In case of input data being supplied to the question, it should be assumed to be a console input.\hich\af2\dbch\af31505\loch\f2  
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par \hich\af2\dbch\af31505\loch\f2 #!/usr/bin/env python
\par \hich\af2\dbch\af31505\loch\f2 import math
\par \hich\af2\dbch\af31505\loch\f2 c=50
\par \hich\af2\dbch\af31505\loch\f2 h=30
\par \hich\af2\dbch\af31505\loch\f2 value = []
\par \hich\af2\dbch\af31505\loch\f2 items=[x for x in raw_input().split(',')]
\par \hich\af2\dbch\af31505\loch\f2 for d in items:
\par \hich\af2\dbch\af31505\loch\f2     value.append(str(int(round(math.sqrt(2*c*float(d)/h)))))
\par 
\par \hich\af2\dbch\af31505\loch\f2 print ','.join(value)
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 Question 7
\par \hich\af2\dbch\af31505\loch\f2 Level 2
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par \hich\af2\dbch\af31505\loch\f2 Write a program which takes 2 digits, X,Y as input and generates a 2-dimensional array. The element value in the i-th row and j-th column of the array should be i*j.
\par \hich\af2\dbch\af31505\loch\f2 Note: i=0,1.., X-\hich\af2\dbch\af31505\loch\f2 \hich\f2 1; j=0,1,\'c2\'a1\'c2\-\loch\f2 Y-1.
\par \hich\af2\dbch\af31505\loch\f2 Example
\par \hich\af2\dbch\af31505\loch\f2 Suppose the following inputs are given to the program:
\par \hich\af2\dbch\af31505\loch\f2 3,5
\par \hich\af2\dbch\af31505\loch\f2 Then, the output of the program should be:
\par \hich\af2\dbch\af31505\loch\f2 [[0, 0, 0, 0, 0], [0, 1, 2, 3, 4], [0, 2, 4, 6, 8]] 
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par \hich\af2\dbch\af31505\loch\f2 Note: In case of input data being supplied to the question, it shou\hich\af2\dbch\af31505\loch\f2 ld be assumed to be a console input in a comma-separated form.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par \hich\af2\dbch\af31505\loch\f2 input_str = raw_input()
\par \hich\af2\dbch\af31505\loch\f2 dimensions=[int(x) for x in input_str.split(',')]
\par \hich\af2\dbch\af31505\loch\f2 rowNum=dimensions[0]
\par \hich\af2\dbch\af31505\loch\f2 colNum=dimensions[1]
\par \hich\af2\dbch\af31505\loch\f2 multilist = [[0 for col in range(colNum)] for row in range(rowNum)\hich\af2\dbch\af31505\loch\f2 ]
\par 
\par \hich\af2\dbch\af31505\loch\f2 for row in range(rowNum):
\par \hich\af2\dbch\af31505\loch\f2     for col in range(colNum):
\par \hich\af2\dbch\af31505\loch\f2         multilist[row][col]= row*col
\par 
\par \hich\af2\dbch\af31505\loch\f2 print multilist
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 Question 8
\par \hich\af2\dbch\af31505\loch\f2 Level 2
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par \hich\af2\dbch\af31505\loch\f2 Write a program that accepts a comma separated sequence of words as input and prints the words in a comma-separated sequence after sorting them alphabetically.
\par \hich\af2\dbch\af31505\loch\f2 Suppose the following input is supplied to the program:
\par \hich\af2\dbch\af31505\loch\f2 without,hello,bag,world
\par \hich\af2\dbch\af31505\loch\f2 Then, the output\hich\af2\dbch\af31505\loch\f2  should be:
\par \hich\af2\dbch\af31505\loch\f2 bag,hello,without,world
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par \hich\af2\dbch\af31505\loch\f2 In case of input data being supplied to the question, it should be assumed to be a console input.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par \hich\af2\dbch\af31505\loch\f2 items=[x for x in raw_input().split(',')]
\par \hich\af2\dbch\af31505\loch\f2 items.sort()
\par \hich\af2\dbch\af31505\loch\f2 print ','.join(items)
\par \hich\af2\dbch\af31505\loch\f2 #-------------------------\hich\af2\dbch\af31505\loch\f2 ---------------#
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 Question 9
\par \hich\af2\dbch\af31505\loch\f2 Level 2
\par 
\par \hich\af2\dbch\af31505\loch\f2 \hich\f2 Question\'c2\'a3\'c2\'ba
\par \hich\af2\dbch\af31505\loch\f2 Write a program that accepts sequence of lines as input and prints the lines after making all characters in the sentence capitalized.
\par \hich\af2\dbch\af31505\loch\f2 Suppose the following input is supplied to the program:
\par \hich\af2\dbch\af31505\loch\f2 Hello world
\par \hich\af2\dbch\af31505\loch\f2 Practice makes perfect
\par \hich\af2\dbch\af31505\loch\f2 Then, the output should be:
\par \hich\af2\dbch\af31505\loch\f2 HELLO WORLD
\par \hich\af2\dbch\af31505\loch\f2 PRACTICE MAKES PERFECT
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par \hich\af2\dbch\af31505\loch\f2 In case of input data being supplied to the question, it should be assumed to be a console inp\hich\af2\dbch\af31505\loch\f2 ut.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par \hich\af2\dbch\af31505\loch\f2 lines = []
\par \hich\af2\dbch\af31505\loch\f2 while True:
\par \hich\af2\dbch\af31505\loch\f2     s = raw_input()
\par \hich\af2\dbch\af31505\loch\f2     if s:
\par \hich\af2\dbch\af31505\loch\f2         lines.append(s.upper())
\par \hich\af2\dbch\af31505\loch\f2     else:
\par \hich\af2\dbch\af31505\loch\f2         break;
\par 
\par \hich\af2\dbch\af31505\loch\f2 for sentence in lines:
\par \hich\af2\dbch\af31505\loch\f2     print sentence
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 Question 10
\par \hich\af2\dbch\af31505\loch\f2 Level 2
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par \hich\af2\dbch\af31505\loch\f2 Write a program that accepts a sequence of whitespace separated words as input and prints the words after removing all duplicate words and sorting them alphanumerically.
\par \hich\af2\dbch\af31505\loch\f2 Suppose the following input is supplied to the program:
\par \hich\af2\dbch\af31505\loch\f2 hello world and practice makes perfect and hello world again
\par \hich\af2\dbch\af31505\loch\f2 Then, the output should be:
\par \hich\af2\dbch\af31505\loch\f2 again and hello makes perfect practice world
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par \hich\af2\dbch\af31505\loch\f2 In case of input data being supplied to the question, it should be assumed to be a console input.
\par \hich\af2\dbch\af31505\loch\f2 We use set cont\hich\af2\dbch\af31505\loch\f2 ainer to remove duplicated data automatically and then use sorted() to sort the data.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par \hich\af2\dbch\af31505\loch\f2 s = raw_input()
\par \hich\af2\dbch\af31505\loch\f2 words = [word for word in s.split(" ")]
\par \hich\af2\dbch\af31505\loch\f2 print " ".join(sorted(list(set(words))))
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par 
\par \hich\af2\dbch\af31505\loch\f2 #-----------------\hich\af2\dbch\af31505\loch\f2 -----------------------#
\par \hich\af2\dbch\af31505\loch\f2 Question 11
\par \hich\af2\dbch\af31505\loch\f2 Level 2
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par \hich\af2\dbch\af31505\loch\f2 Write a program which accepts a sequence of comma separated 4 digit binary numbers as its input and then check whether they are divisible by 5 or not. The numbers that are divisible by 5 are to be pri
\hich\af2\dbch\af31505\loch\f2 nted in a comma separated sequence.
\par \hich\af2\dbch\af31505\loch\f2 Example:
\par \hich\af2\dbch\af31505\loch\f2 0100,0011,1010,1001
\par \hich\af2\dbch\af31505\loch\f2 Then the output should be:
\par \hich\af2\dbch\af31505\loch\f2 1010
\par \hich\af2\dbch\af31505\loch\f2 Notes: Assume the data is input by console.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par \hich\af2\dbch\af31505\loch\f2 In case of input data being supplied to the question, it should be assumed to be a console input.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par \hich\af2\dbch\af31505\loch\f2 value = []
\par \hich\af2\dbch\af31505\loch\f2 items=[x for x in raw_input().split(',')]
\par \hich\af2\dbch\af31505\loch\f2 for p in items:
\par \hich\af2\dbch\af31505\loch\f2     intp = int(p, 2)
\par \hich\af2\dbch\af31505\loch\f2     if not intp%5:
\par \hich\af2\dbch\af31505\loch\f2         value.append(p)
\par 
\par \hich\af2\dbch\af31505\loch\f2 print ','.join(value)
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 Que\hich\af2\dbch\af31505\loch\f2 stion 12
\par \hich\af2\dbch\af31505\loch\f2 Level 2
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par \hich\af2\dbch\af31505\loch\f2 Write a program, which will find all such numbers between 1000 and 3000 (both included) such that each digit of the number is an even number.
\par \hich\af2\dbch\af31505\loch\f2 The numbers obtained should be printed in a comma-separated sequence on a single line.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par \hich\af2\dbch\af31505\loch\f2 In case of input data being supplied to the question, it should be assumed to be a console input.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par \hich\af2\dbch\af31505\loch\f2 values = []
\par \hich\af2\dbch\af31505\loch\f2 for i in range(1000, 3001):
\par \hich\af2\dbch\af31505\loch\f2     s = str(i)
\par \hich\af2\dbch\af31505\loch\f2     if (int(s[0])%2==0) and (int(s[1])%2==0) and (int(s[2])%2==0) and (int(s[3])%2==0):
\par \hich\af2\dbch\af31505\loch\f2         values.append(s)
\par \hich\af2\dbch\af31505\loch\f2 print ",".join(values)
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 Question 13
\par \hich\af2\dbch\af31505\loch\f2 Level 2
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par \hich\af2\dbch\af31505\loch\f2 Wr\hich\af2\dbch\af31505\loch\f2 ite a program that accepts a sentence and calculate the number of letters and digits.
\par \hich\af2\dbch\af31505\loch\f2 Suppose the following input is supplied to the program:
\par \hich\af2\dbch\af31505\loch\f2 hello world! 123
\par \hich\af2\dbch\af31505\loch\f2 Then, the output should be:
\par \hich\af2\dbch\af31505\loch\f2 LETTERS 10
\par \hich\af2\dbch\af31505\loch\f2 DIGITS 3
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par \hich\af2\dbch\af31505\loch\f2 In case of input data being supplied to t\hich\af2\dbch\af31505\loch\f2 he question, it should be assumed to be a console input.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par \hich\af2\dbch\af31505\loch\f2 s = raw_input()
\par \hich\af2\dbch\af31505\loch\f2 d=\{"DIGITS":0, "LETTERS":0\}
\par \hich\af2\dbch\af31505\loch\f2 for c in s:
\par \hich\af2\dbch\af31505\loch\f2     if c.isdigit():
\par \hich\af2\dbch\af31505\loch\f2         d["DIGITS"]+=1
\par \hich\af2\dbch\af31505\loch\f2     elif c.isalpha():
\par \hich\af2\dbch\af31505\loch\f2         d["LETTERS"]+=1
\par \hich\af2\dbch\af31505\loch\f2     else:
\par \hich\af2\dbch\af31505\loch\f2         pass
\par \hich\af2\dbch\af31505\loch\f2 print "LETTERS", d["LETTERS"]
\par \hich\af2\dbch\af31505\loch\f2 print "DIGITS", d["DIGITS"]
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 Question 14
\par \hich\af2\dbch\af31505\loch\f2 Level 2
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par \hich\af2\dbch\af31505\loch\f2 Write a program that accepts a sentence and calculate the number of upper case l\hich\af2\dbch\af31505\loch\f2 etters and lower case letters.
\par \hich\af2\dbch\af31505\loch\f2 Suppose the following input is supplied to the program:
\par \hich\af2\dbch\af31505\loch\f2 Hello world!
\par \hich\af2\dbch\af31505\loch\f2 Then, the output should be:
\par \hich\af2\dbch\af31505\loch\f2 UPPER CASE 1
\par \hich\af2\dbch\af31505\loch\f2 LOWER CASE 9
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par \hich\af2\dbch\af31505\loch\f2 In case of input data being supplied to the question, it should be assumed to be a console inp\hich\af2\dbch\af31505\loch\f2 ut.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par \hich\af2\dbch\af31505\loch\f2 s = raw_input()
\par \hich\af2\dbch\af31505\loch\f2 d=\{"UPPER CASE":0, "LOWER CASE":0\}
\par \hich\af2\dbch\af31505\loch\f2 for c in s:
\par \hich\af2\dbch\af31505\loch\f2     if c.isupper():
\par \hich\af2\dbch\af31505\loch\f2         d["UPPER CASE"]+=1
\par \hich\af2\dbch\af31505\loch\f2     elif c.islower():
\par \hich\af2\dbch\af31505\loch\f2         d["LOWER CASE"]+=1
\par \hich\af2\dbch\af31505\loch\f2     else:
\par \hich\af2\dbch\af31505\loch\f2         pass
\par \hich\af2\dbch\af31505\loch\f2 print "UPPER CASE", d["UPPER CASE"]
\par \hich\af2\dbch\af31505\loch\f2 print "LO\hich\af2\dbch\af31505\loch\f2 WER CASE", d["LOWER CASE"]
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 Question 15
\par \hich\af2\dbch\af31505\loch\f2 Level 2
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par \hich\af2\dbch\af31505\loch\f2 Write a program that computes the value of a+aa+aaa+aaaa with a given digit as the value of a.
\par \hich\af2\dbch\af31505\loch\f2 Suppose the foll\hich\af2\dbch\af31505\loch\f2 owing input is supplied to the program:
\par \hich\af2\dbch\af31505\loch\f2 9
\par \hich\af2\dbch\af31505\loch\f2 Then, the output should be:
\par \hich\af2\dbch\af31505\loch\f2 11106
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par \hich\af2\dbch\af31505\loch\f2 In case of input data being supplied to the question, it should be assumed to be a console input.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par \hich\af2\dbch\af31505\loch\f2 a = raw_input()
\par \hich\af2\dbch\af31505\loch\f2 n1 = int( "%s" % a )
\par \hich\af2\dbch\af31505\loch\f2 n2 = int( "%s%s" % (a,a) )
\par \hich\af2\dbch\af31505\loch\f2 n3 = int( "%s%s%s" % (a,a,a) )
\par \hich\af2\dbch\af31505\loch\f2 n4 = int( "%s%s%s%s" % (a,a,a,a) )
\par \hich\af2\dbch\af31505\loch\f2 print n1+n2+n3+n4
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 Question 16
\par \hich\af2\dbch\af31505\loch\f2 Level 2
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par \hich\af2\dbch\af31505\loch\f2 Use a list comprehension to square each odd number in\hich\af2\dbch\af31505\loch\f2  a list. The list is input by a sequence of comma-separated numbers.
\par \hich\af2\dbch\af31505\loch\f2 Suppose the following input is supplied to the program:
\par \hich\af2\dbch\af31505\loch\f2 1,2,3,4,5,6,7,8,9
\par \hich\af2\dbch\af31505\loch\f2 Then, the output should be:
\par \hich\af2\dbch\af31505\loch\f2 1,3,5,7,9
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par \hich\af2\dbch\af31505\loch\f2 In case of input data being supplied to the question, it should be \hich\af2\dbch\af31505\loch\f2 assumed to be a console input.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par \hich\af2\dbch\af31505\loch\f2 values = raw_input()
\par \hich\af2\dbch\af31505\loch\f2 numbers = [x for x in values.split(",") if int(x)%2!=0]
\par \hich\af2\dbch\af31505\loch\f2 print ",".join(numbers)
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question 17
\par \hich\af2\dbch\af31505\loch\f2 Level 2
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par \hich\af2\dbch\af31505\loch\f2 Write a program that computes the net amount of a bank account based a transaction log from console input. The transaction log format is shown as following:
\par \hich\af2\dbch\af31505\loch\f2 D 100
\par \hich\af2\dbch\af31505\loch\f2 W 200
\par 
\par \hich\af2\dbch\af31505\loch\f2 D means deposit while W means withdrawal.
\par \hich\af2\dbch\af31505\loch\f2 Suppose the following input is supplied to t\hich\af2\dbch\af31505\loch\f2 he program:
\par \hich\af2\dbch\af31505\loch\f2 D 300
\par \hich\af2\dbch\af31505\loch\f2 D 300
\par \hich\af2\dbch\af31505\loch\f2 W 200
\par \hich\af2\dbch\af31505\loch\f2 D 100
\par \hich\af2\dbch\af31505\loch\f2 Then, the output should be:
\par \hich\af2\dbch\af31505\loch\f2 500
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par \hich\af2\dbch\af31505\loch\f2 In case of input data being supplied to the question, it should be assumed to be a console input.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par \hich\af2\dbch\af31505\loch\f2 netAmount = 0
\par \hich\af2\dbch\af31505\loch\f2 while True:
\par \hich\af2\dbch\af31505\loch\f2     s = raw_input()
\par \hich\af2\dbch\af31505\loch\f2     if not s:
\par \hich\af2\dbch\af31505\loch\f2         bre\hich\af2\dbch\af31505\loch\f2 ak
\par \hich\af2\dbch\af31505\loch\f2     values = s.split(" ")
\par \hich\af2\dbch\af31505\loch\f2     operation = values[0]
\par \hich\af2\dbch\af31505\loch\f2     amount = int(values[1])
\par \hich\af2\dbch\af31505\loch\f2     if operation=="D":
\par \hich\af2\dbch\af31505\loch\f2         netAmount+=amount
\par \hich\af2\dbch\af31505\loch\f2     elif operation=="W":
\par \hich\af2\dbch\af31505\loch\f2         netAmount-=amount
\par \hich\af2\dbch\af31505\loch\f2     else:
\par \hich\af2\dbch\af31505\loch\f2         pass
\par \hich\af2\dbch\af31505\loch\f2 print netAmount
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 Question 18
\par \hich\af2\dbch\af31505\loch\f2 Level 3
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par \hich\af2\dbch\af31505\loch\f2 A website requires the users to input username and password to register. Write a program to check the validity of password input by users.
\par \hich\af2\dbch\af31505\loch\f2 Following are the criteria for checking the password:
\par \hich\af2\dbch\af31505\loch\f2 1. At least 1 letter between [a-z]
\par \hich\af2\dbch\af31505\loch\f2 2. At least 1 number between [0-9]
\par \hich\af2\dbch\af31505\loch\f2 1. At least 1 letter between [A-Z]
\par \hich\af2\dbch\af31505\loch\f2 3. At least 1 character from [$#@]
\par \hich\af2\dbch\af31505\loch\f2 4. Minimum length of transaction password: 6
\par \hich\af2\dbch\af31505\loch\f2 5. Maximum lengt\hich\af2\dbch\af31505\loch\f2 h of transaction password: 12
\par \hich\af2\dbch\af31505\loch\f2 Your program should accept a sequence of comma separated passwords and will check them according to the above criteria. Passwords that match the criteria are to be printed, each separated by a comma.
\par \hich\af2\dbch\af31505\loch\f2 Example
\par \hich\af2\dbch\af31505\loch\f2 If the following p\hich\af2\dbch\af31505\loch\f2 asswords are given as input to the program:
\par \hich\af2\dbch\af31505\loch\f2 ABd1234@1,a F1#,2w3E*,2We3345
\par \hich\af2\dbch\af31505\loch\f2 Then, the output of the program should be:
\par \hich\af2\dbch\af31505\loch\f2 ABd1234@1
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par \hich\af2\dbch\af31505\loch\f2 In case of input data being supplied to the question, it should be assumed to be a console input.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solutions:
\par \hich\af2\dbch\af31505\loch\f2 import re
\par \hich\af2\dbch\af31505\loch\f2 value = []
\par \hich\af2\dbch\af31505\loch\f2 items=[x for x in raw_input().split(',')]
\par \hich\af2\dbch\af31505\loch\f2 for p in items:
\par \hich\af2\dbch\af31505\loch\f2     if len(p)<6 or len(p)>12:
\par \hich\af2\dbch\af31505\loch\f2         continue
\par \hich\af2\dbch\af31505\loch\f2     else:
\par \hich\af2\dbch\af31505\loch\f2         pass
\par \hich\af2\dbch\af31505\loch\f2     if not re.search("[a-z]",p):
\par \hich\af2\dbch\af31505\loch\f2         continue
\par \hich\af2\dbch\af31505\loch\f2     elif not re.search("[0-9]",p):
\par \hich\af2\dbch\af31505\loch\f2         continue
\par \hich\af2\dbch\af31505\loch\f2     elif not re\hich\af2\dbch\af31505\loch\f2 .search("[A-Z]",p):
\par \hich\af2\dbch\af31505\loch\f2         continue
\par \hich\af2\dbch\af31505\loch\f2     elif not re.search("[$#@]",p):
\par \hich\af2\dbch\af31505\loch\f2         continue
\par \hich\af2\dbch\af31505\loch\f2     elif re.search("\\s",p):
\par \hich\af2\dbch\af31505\loch\f2         continue
\par \hich\af2\dbch\af31505\loch\f2     else:
\par \hich\af2\dbch\af31505\loch\f2         pass
\par \hich\af2\dbch\af31505\loch\f2     value.append(p)
\par \hich\af2\dbch\af31505\loch\f2 print ",".join(value)
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 Question 19
\par \hich\af2\dbch\af31505\loch\f2 Level 3
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par \hich\af2\dbch\af31505\loch\f2 You are required to write a program to sort the (name, age, height) tuples by ascending order where name is string, age and height are numbers. The tuples are input by console. The s\hich\af2\dbch\af31505\loch\f2 
ort criteria is:
\par \hich\af2\dbch\af31505\loch\f2 1: Sort based on name;
\par \hich\af2\dbch\af31505\loch\f2 2: Then sort based on age;
\par \hich\af2\dbch\af31505\loch\f2 3: Then sort by score.
\par \hich\af2\dbch\af31505\loch\f2 The priority is that name > age > score.
\par \hich\af2\dbch\af31505\loch\f2 If the following tuples are given as input to the program:
\par \hich\af2\dbch\af31505\loch\f2 Tom,19,80
\par \hich\af2\dbch\af31505\loch\f2 John,20,90
\par \hich\af2\dbch\af31505\loch\f2 Jony,17,91
\par \hich\af2\dbch\af31505\loch\f2 Jony,17,93
\par \hich\af2\dbch\af31505\loch\f2 Json,21,85
\par \hich\af2\dbch\af31505\loch\f2 Then, the ou\hich\af2\dbch\af31505\loch\f2 tput of the program should be:
\par \hich\af2\dbch\af31505\loch\f2 [('John', '20', '90'), ('Jony', '17', '91'), ('Jony', '17', '93'), ('Json', '21', '85'), ('Tom', '19', '80')]
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par \hich\af2\dbch\af31505\loch\f2 In case of input data being supplied to the question, it should be assumed to be a console input.
\par \hich\af2\dbch\af31505\loch\f2 We use it\hich\af2\dbch\af31505\loch\f2 emgetter to enable multiple sort keys.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solutions:
\par \hich\af2\dbch\af31505\loch\f2 from operator import itemgetter, attrgetter
\par 
\par \hich\af2\dbch\af31505\loch\f2 l = []
\par \hich\af2\dbch\af31505\loch\f2 while True:
\par \hich\af2\dbch\af31505\loch\f2     s = raw_input()
\par \hich\af2\dbch\af31505\loch\f2     if not s:
\par \hich\af2\dbch\af31505\loch\f2         break
\par \hich\af2\dbch\af31505\loch\f2     l.append(tuple(s.split(",")))
\par 
\par \hich\af2\dbch\af31505\loch\f2 print sorted(l, key=itemgetter(0,1,2))
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 Question 20
\par \hich\af2\dbch\af31505\loch\f2 Level 3
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par \hich\af2\dbch\af31505\loch\f2 Define a class with a generator which can iterate the numbers, which are divisible by 7, between a given range 0 and n.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par \hich\af2\dbch\af31505\loch\f2 Consider u\hich\af2\dbch\af31505\loch\f2 se yield
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par \hich\af2\dbch\af31505\loch\f2 def putNumbers(n):
\par \hich\af2\dbch\af31505\loch\f2     i = 0
\par \hich\af2\dbch\af31505\loch\f2     while i<n:
\par \hich\af2\dbch\af31505\loch\f2         j=i
\par \hich\af2\dbch\af31505\loch\f2         i=i+1
\par \hich\af2\dbch\af31505\loch\f2         if j%7==0:
\par \hich\af2\dbch\af31505\loch\f2             yield j
\par 
\par \hich\af2\dbch\af31505\loch\f2 for i in reverse(100):
\par \hich\af2\dbch\af31505\loch\f2     print i
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 Question 21
\par \hich\af2\dbch\af31505\loch\f2 Level 3
\par 
\par \hich\af2\dbch\af31505\loch\f2 \hich\f2 Question\'c2\'a3\'c2\'ba
\par \hich\af2\dbch\af31505\loch\f2 A robot moves in a plane starting from the original point (0,0). The robot can move toward UP, DOWN, LEFT and RIGHT with a given steps. The trace of robot movement is shown as the following:
\par \hich\af2\dbch\af31505\loch\f2 UP 5
\par \hich\af2\dbch\af31505\loch\f2 DOWN 3
\par \hich\af2\dbch\af31505\loch\f2 LEFT 3
\par \hich\af2\dbch\af31505\loch\f2 RIGHT 2
\par \loch\af2\dbch\af31505\hich\f2 \'c2\'a1\'c2\-
\par \hich\af2\dbch\af31505\loch\f2 
The numbers after the direction are steps. Please write a program to compute the distance from current position after a sequence of movement and original point. If the distance is a float, then just print the nearest integer.
\par \hich\af2\dbch\af31505\loch\f2 Example:
\par \hich\af2\dbch\af31505\loch\f2 If the following tup\hich\af2\dbch\af31505\loch\f2 les are given as input to the program:
\par \hich\af2\dbch\af31505\loch\f2 UP 5
\par \hich\af2\dbch\af31505\loch\f2 DOWN 3
\par \hich\af2\dbch\af31505\loch\f2 LEFT 3
\par \hich\af2\dbch\af31505\loch\f2 RIGHT 2
\par \hich\af2\dbch\af31505\loch\f2 Then, the output of the program should be:
\par \hich\af2\dbch\af31505\loch\f2 2
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par \hich\af2\dbch\af31505\loch\f2 In case of input data being supplied to the question, it should be assumed to be a console input.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par \hich\af2\dbch\af31505\loch\f2 import math
\par \hich\af2\dbch\af31505\loch\f2 pos = [0,0]
\par \hich\af2\dbch\af31505\loch\f2 while True:
\par \hich\af2\dbch\af31505\loch\f2     s = raw_input()
\par \hich\af2\dbch\af31505\loch\f2     if not s:
\par \hich\af2\dbch\af31505\loch\f2         break
\par \hich\af2\dbch\af31505\loch\f2     movement = s.split(" ")
\par \hich\af2\dbch\af31505\loch\f2     direction = movement[0]
\par \hich\af2\dbch\af31505\loch\f2     steps = int(movement[1])
\par \hich\af2\dbch\af31505\loch\f2     if direction=="UP":
\par \hich\af2\dbch\af31505\loch\f2         pos[0]+=steps
\par \hich\af2\dbch\af31505\loch\f2     elif direction=="DOWN":
\par \hich\af2\dbch\af31505\loch\f2         pos[0]-=steps
\par \hich\af2\dbch\af31505\loch\f2     elif direct\hich\af2\dbch\af31505\loch\f2 ion=="LEFT":
\par \hich\af2\dbch\af31505\loch\f2         pos[1]-=steps
\par \hich\af2\dbch\af31505\loch\f2     elif direction=="RIGHT":
\par \hich\af2\dbch\af31505\loch\f2         pos[1]+=steps
\par \hich\af2\dbch\af31505\loch\f2     else:
\par \hich\af2\dbch\af31505\loch\f2         pass
\par 
\par \hich\af2\dbch\af31505\loch\f2 print int(round(math.sqrt(pos[1]**2+pos[0]**2)))
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 Question 2\hich\af2\dbch\af31505\loch\f2 2
\par \hich\af2\dbch\af31505\loch\f2 Level 3
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par \hich\af2\dbch\af31505\loch\f2 Write a program to compute the frequency of the words from the input. The output should output after sorting the key alphanumerically. 
\par \hich\af2\dbch\af31505\loch\f2 Suppose the following input is supplied to the program:
\par \hich\af2\dbch\af31505\loch\f2 New to Python or choosing between Python 2 and Python 3? Read Python 2 or Python 3.
\par \hich\af2\dbch\af31505\loch\f2 Then, the output should be:
\par \hich\af2\dbch\af31505\loch\f2 2:2
\par \hich\af2\dbch\af31505\loch\f2 3.:1
\par \hich\af2\dbch\af31505\loch\f2 3?:1
\par \hich\af2\dbch\af31505\loch\f2 New:1
\par \hich\af2\dbch\af31505\loch\f2 Python:5
\par \hich\af2\dbch\af31505\loch\f2 Read:1
\par \hich\af2\dbch\af31505\loch\f2 and:1
\par \hich\af2\dbch\af31505\loch\f2 between:1
\par \hich\af2\dbch\af31505\loch\f2 choosing:1
\par \hich\af2\dbch\af31505\loch\f2 or:2
\par \hich\af2\dbch\af31505\loch\f2 to:1
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints
\par \hich\af2\dbch\af31505\loch\f2 In case of input data being supplied to the question, it should \hich\af2\dbch\af31505\loch\f2 be assumed to be a console input.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par \hich\af2\dbch\af31505\loch\f2 freq = \{\}   # frequency of words in text
\par \hich\af2\dbch\af31505\loch\f2 line = raw_input()
\par \hich\af2\dbch\af31505\loch\f2 for word in line.split():
\par \hich\af2\dbch\af31505\loch\f2     freq[word] = freq.get(word,0)+1
\par 
\par \hich\af2\dbch\af31505\loch\f2 words = freq.keys()
\par \hich\af2\dbch\af31505\loch\f2 words.sort()
\par 
\par \hich\af2\dbch\af31505\loch\f2 for w in words:
\par \hich\af2\dbch\af31505\loch\f2     print "%s:%d" % (w,freq[w])
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 Question 23
\par \hich\af2\dbch\af31505\loch\f2 level 1
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par \hich\af2\dbch\af31505\loch\f2     Write a method which can calculate square value of number
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par \hich\af2\dbch\af31505\loch\f2     Using the ** operator
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par \hich\af2\dbch\af31505\loch\f2 def square(num):
\par \hich\af2\dbch\af31505\loch\f2     return num\hich\af2\dbch\af31505\loch\f2  ** 2
\par 
\par \hich\af2\dbch\af31505\loch\f2 print square(2)
\par \hich\af2\dbch\af31505\loch\f2 print square(3)
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 Question 24
\par \hich\af2\dbch\af31505\loch\f2 Level 1
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par \hich\af2\dbch\af31505\loch\f2     Python has many built-in functions, and if you do not know how to use it, you can read document online or find some books. But Python has a built-in document function for every built-in functions.
\par \hich\af2\dbch\af31505\loch\f2     Please write a program to print some Python built-i\hich\af2\dbch\af31505\loch\f2 n functions documents, such as abs(), int(), raw_input()
\par \hich\af2\dbch\af31505\loch\f2     And add document for your own function
\par \hich\af2\dbch\af31505\loch\f2     
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par \hich\af2\dbch\af31505\loch\f2     The built-in document method is __doc__
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par \hich\af2\dbch\af31505\loch\f2 print abs.__doc__
\par \hich\af2\dbch\af31505\loch\f2 print int.__doc__
\par \hich\af2\dbch\af31505\loch\f2 print raw_input.__doc__
\par 
\par \hich\af2\dbch\af31505\loch\f2 def square(num):
\par \hich\af2\dbch\af31505\loch\f2     '''Retu\hich\af2\dbch\af31505\loch\f2 rn the square value of the input number.
\par \hich\af2\dbch\af31505\loch\f2     
\par \hich\af2\dbch\af31505\loch\f2     The input number must be integer.
\par \hich\af2\dbch\af31505\loch\f2     '''
\par \hich\af2\dbch\af31505\loch\f2     return num ** 2
\par 
\par \hich\af2\dbch\af31505\loch\f2 print square(2)
\par \hich\af2\dbch\af31505\loch\f2 print square.__doc__
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 Question 25
\par \hich\af2\dbch\af31505\loch\f2 Level 1
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par \hich\af2\dbch\af31505\loch\f2     Define a class, which have a class parameter and have a same instance parameter.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par \hich\af2\dbch\af31505\loch\f2     Define a instance parameter, need add it in __init__ method
\par \hich\af2\dbch\af31505\loch\f2     You can init a object with construct parameter or set the value later
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par \hich\af2\dbch\af31505\loch\f2 class Person:
\par \hich\af2\dbch\af31505\loch\f2     # Define the class parameter "name"
\par \hich\af2\dbch\af31505\loch\f2     name = "Person"
\par \hich\af2\dbch\af31505\loch\f2     
\par \hich\af2\dbch\af31505\loch\f2     def __init__(self, name = None):
\par \hich\af2\dbch\af31505\loch\f2         # self.name is the instance parameter
\par \hich\af2\dbch\af31505\loch\f2         self.name = name
\par 
\par \hich\af2\dbch\af31505\loch\f2 jeffrey = Person("Jeffrey")
\par \hich\af2\dbch\af31505\loch\f2 print "%s name is %s" % (Person.name, je\hich\af2\dbch\af31505\loch\f2 ffrey.name)
\par 
\par \hich\af2\dbch\af31505\loch\f2 nico = Person()
\par \hich\af2\dbch\af31505\loch\f2 nico.name = "Nico"
\par \hich\af2\dbch\af31505\loch\f2 print "%s name is %s" % (Person.name, nico.name)
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par \hich\af2\dbch\af31505\loch\f2 Define a function which can compute the sum of two numbers.
\par 
\par \hich\af2\dbch\af31505\loch\f2 H\hich\af2\dbch\af31505\loch\f2 ints:
\par \hich\af2\dbch\af31505\loch\f2 Define a function with two numbers as arguments. You can compute the sum in the function and return the value.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution
\par \hich\af2\dbch\af31505\loch\f2 def SumFunction(number1, number2):
\par \tab \hich\af2\dbch\af31505\loch\f2 return number1+number2
\par 
\par \hich\af2\dbch\af31505\loch\f2 print SumFunction(1,2)
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par \hich\af2\dbch\af31505\loch\f2 Define a function that can convert a integer into a string and print it in console.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Use str() to convert a number to string.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution
\par \hich\af2\dbch\af31505\loch\f2 def printValue(n):
\par \tab \hich\af2\dbch\af31505\loch\f2 print str(n)
\par 
\par \hich\af2\dbch\af31505\loch\f2 printValue(3)
\par \tab 
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 Question\hich\af2\dbch\af31505\loch\f2 :
\par \hich\af2\dbch\af31505\loch\f2 Define a function that can convert a integer into a string and print it in console.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Use str() to convert a number to string.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution
\par \hich\af2\dbch\af31505\loch\f2 def printValue(n):
\par \tab \hich\af2\dbch\af31505\loch\f2 print str(n)
\par 
\par \hich\af2\dbch\af31505\loch\f2 printValue(3)
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 2.10
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par \hich\af2\dbch\af31505\loch\f2 Define a function that can receive two integral numbers in string form and compute their sum and then print it in console.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Use int() to convert a string to integer.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution
\par \hich\af2\dbch\af31505\loch\f2 def printValue(s1,s2):
\par \tab \hich\af2\dbch\af31505\loch\f2 print int(s1)+int(s2)
\par 
\par \hich\af2\dbch\af31505\loch\f2 printValue("3","4") #7
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 2.10
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par \hich\af2\dbch\af31505\loch\f2 Define a function that can accept two strings as input and concatenate them and then print it in console.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Use + to concatenate the strings
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution
\par \hich\af2\dbch\af31505\loch\f2 def printValue(s1,s2):
\par \tab \hich\af2\dbch\af31505\loch\f2 print s1+s2
\par 
\par \hich\af2\dbch\af31505\loch\f2 printValue("3","4") #34
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 2.10
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par \hich\af2\dbch\af31505\loch\f2 Define a function that can accept two strings as input and print the string with maximum length in console. If two strings have the same length, then the function should p\hich\af2\dbch\af31505\loch\f2 
rint al l strings line by line.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Use len() function to get the length of a string
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution
\par \hich\af2\dbch\af31505\loch\f2 def printValue(s1,s2):
\par \tab \hich\af2\dbch\af31505\loch\f2 len1 = len(s1)
\par \tab \hich\af2\dbch\af31505\loch\f2 len2 = len(s2)
\par \tab \hich\af2\dbch\af31505\loch\f2 if len1>len2:
\par \tab \tab \hich\af2\dbch\af31505\loch\f2 print s1
\par \tab \hich\af2\dbch\af31505\loch\f2 elif len2>len1:
\par \tab \tab \hich\af2\dbch\af31505\loch\f2 print s2
\par \tab \hich\af2\dbch\af31505\loch\f2 else:
\par \tab \tab \hich\af2\dbch\af31505\loch\f2 print s1
\par \tab \tab \hich\af2\dbch\af31505\loch\f2 print s2
\par \tab \tab 
\par 
\par \hich\af2\dbch\af31505\loch\f2 printValue("one","three")
\par 
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 2.10
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par \hich\af2\dbch\af31505\loch\f2 Define a function that can accept an integer number as input and print the "It is an even number" if the number is even, otherwise print "It is an odd number".
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Use % operator to check if a number is even or odd.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution
\par \hich\af2\dbch\af31505\loch\f2 def checkValue(n):
\par \tab \hich\af2\dbch\af31505\loch\f2 if n%2 == 0:
\par \tab \tab \hich\af2\dbch\af31505\loch\f2 print "It is an even number"
\par \tab \hich\af2\dbch\af31505\loch\f2 else:
\par \tab \tab \hich\af2\dbch\af31505\loch\f2 print "It is an odd number"
\par \tab \tab 
\par 
\par \hich\af2\dbch\af31505\loch\f2 checkValue(7)
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 2.10
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par \hich\af2\dbch\af31505\loch\f2 Define a function which can print a dictionary where the keys are numbers between 1 and 3 (both included) and the values are square of keys.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Use dict[key]=value pattern to put entry into a dictionary.
\par \hich\af2\dbch\af31505\loch\f2 Use ** operator to get power of a number.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Sol\hich\af2\dbch\af31505\loch\f2 ution
\par \hich\af2\dbch\af31505\loch\f2 def printDict():
\par \tab \hich\af2\dbch\af31505\loch\f2 d=dict()
\par \tab \hich\af2\dbch\af31505\loch\f2 d[1]=1
\par \tab \hich\af2\dbch\af31505\loch\f2 d[2]=2**2
\par \tab \hich\af2\dbch\af31505\loch\f2 d[3]=3**2
\par \tab \hich\af2\dbch\af31505\loch\f2 print d
\par \tab \tab 
\par 
\par \hich\af2\dbch\af31505\loch\f2 printDict()
\par 
\par 
\par 
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 2.10
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par \hich\af2\dbch\af31505\loch\f2 Define a function whic\hich\af2\dbch\af31505\loch\f2 h can print a dictionary where the keys are numbers between 1 and 20 (both included) and the values are square of keys.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Use dict[key]=value pattern to put entry into a dictionary.
\par \hich\af2\dbch\af31505\loch\f2 Use ** operator to get power of a number.
\par \hich\af2\dbch\af31505\loch\f2 Use range() for loops.
\par 
\par \hich\af2\dbch\af31505\loch\f2 S\hich\af2\dbch\af31505\loch\f2 olution
\par \hich\af2\dbch\af31505\loch\f2 def printDict():
\par \tab \hich\af2\dbch\af31505\loch\f2 d=dict()
\par \tab \hich\af2\dbch\af31505\loch\f2 for i in range(1,21):
\par \tab \tab \hich\af2\dbch\af31505\loch\f2 d[i]=i**2
\par \tab \hich\af2\dbch\af31505\loch\f2 print d
\par \tab \tab 
\par 
\par \hich\af2\dbch\af31505\loch\f2 printDict()
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 2.10
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par \hich\af2\dbch\af31505\loch\f2 Define a function which can generate a dictionary where the keys are numbers between 1 and 20 (both included) and the values are square of keys. The function should just print the values only.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Use dict[key]=value pattern to put entry into a dictio\hich\af2\dbch\af31505\loch\f2 nary.
\par \hich\af2\dbch\af31505\loch\f2 Use ** operator to get power of a number.
\par \hich\af2\dbch\af31505\loch\f2 Use range() for loops.
\par \hich\af2\dbch\af31505\loch\f2 Use keys() to iterate keys in the dictionary. Also we can use item() to get key/value pairs.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution
\par \hich\af2\dbch\af31505\loch\f2 def printDict():
\par \tab \hich\af2\dbch\af31505\loch\f2 d=dict()
\par \tab \hich\af2\dbch\af31505\loch\f2 for i in range(1,21):
\par \tab \tab \hich\af2\dbch\af31505\loch\f2 d[i]=i**2
\par \tab \hich\af2\dbch\af31505\loch\f2 for (k,v) in d.item\hich\af2\dbch\af31505\loch\f2 s():\tab 
\par \tab \tab \hich\af2\dbch\af31505\loch\f2 print v
\par \tab \tab 
\par 
\par \hich\af2\dbch\af31505\loch\f2 printDict()
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 2.10
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par \hich\af2\dbch\af31505\loch\f2 Define a function which can generate a dictionary where the keys are numbers between 1 and 20 (both included) and the values are square of keys. The function should just print the keys only.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Use dict[key]=value pattern to put entry into a dictiona\hich\af2\dbch\af31505\loch\f2 ry.
\par \hich\af2\dbch\af31505\loch\f2 Use ** operator to get power of a number.
\par \hich\af2\dbch\af31505\loch\f2 Use range() for loops.
\par \hich\af2\dbch\af31505\loch\f2 Use keys() to iterate keys in the dictionary. Also we can use item() to get key/value pairs.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution
\par \hich\af2\dbch\af31505\loch\f2 def printDict():
\par \tab \hich\af2\dbch\af31505\loch\f2 d=dict()
\par \tab \hich\af2\dbch\af31505\loch\f2 for i in range(1,21):
\par \tab \tab \hich\af2\dbch\af31505\loch\f2 d[i]=i**2
\par \tab \hich\af2\dbch\af31505\loch\f2 for k in d.keys():\tab 
\par \tab \tab \hich\af2\dbch\af31505\loch\f2 print k
\par \tab \tab 
\par 
\par \hich\af2\dbch\af31505\loch\f2 printDict()
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 2.10
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par \hich\af2\dbch\af31505\loch\f2 Define a function which can generate and print a list where the values are square of numbers between 1 and 20 (both included).
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Use ** operator to get power of a number.
\par \hich\af2\dbch\af31505\loch\f2 Use range() for loops.
\par \hich\af2\dbch\af31505\loch\f2 Use list.append() to add values into a list.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution
\par \hich\af2\dbch\af31505\loch\f2 def printList():
\par \tab \hich\af2\dbch\af31505\loch\f2 li=list()
\par \tab \hich\af2\dbch\af31505\loch\f2 for i in range(1,21):
\par \tab \tab \hich\af2\dbch\af31505\loch\f2 li.append(i**2)
\par \tab \hich\af2\dbch\af31505\loch\f2 print li
\par \tab \tab 
\par 
\par \hich\af2\dbch\af31505\loch\f2 printList()
\par 
\par \hich\af2\dbch\af31505\loch\f2 #---------------------------------------\hich\af2\dbch\af31505\loch\f2 -#
\par \hich\af2\dbch\af31505\loch\f2 2.10
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par \hich\af2\dbch\af31505\loch\f2 Define a function which can generate a list where the values are square of numbers between 1 and 20 (both included). Then the function needs to print the first 5 elements in the list.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Use ** operator to get power of a number.
\par \hich\af2\dbch\af31505\loch\f2 Us\hich\af2\dbch\af31505\loch\f2 e range() for loops.
\par \hich\af2\dbch\af31505\loch\f2 Use list.append() to add values into a list.
\par \hich\af2\dbch\af31505\loch\f2 Use [n1:n2] to slice a list
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution
\par \hich\af2\dbch\af31505\loch\f2 def printList():
\par \tab \hich\af2\dbch\af31505\loch\f2 li=list()
\par \tab \hich\af2\dbch\af31505\loch\f2 for i in range(1,21):
\par \tab \tab \hich\af2\dbch\af31505\loch\f2 li.append(i**2)
\par \tab \hich\af2\dbch\af31505\loch\f2 print li[:5]
\par \tab \tab 
\par 
\par \hich\af2\dbch\af31505\loch\f2 printList()
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 2.10
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par \hich\af2\dbch\af31505\loch\f2 Define a function which can generate a list where the values are square of numbers between 1 and 20 (both included). Then the function needs to print the last 5 elements in the list.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Use ** operator to get power of a number.
\par \hich\af2\dbch\af31505\loch\f2 Use range() \hich\af2\dbch\af31505\loch\f2 for loops.
\par \hich\af2\dbch\af31505\loch\f2 Use list.append() to add values into a list.
\par \hich\af2\dbch\af31505\loch\f2 Use [n1:n2] to slice a list
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution
\par \hich\af2\dbch\af31505\loch\f2 def printList():
\par \tab \hich\af2\dbch\af31505\loch\f2 li=list()
\par \tab \hich\af2\dbch\af31505\loch\f2 for i in range(1,21):
\par \tab \tab \hich\af2\dbch\af31505\loch\f2 li.append(i**2)
\par \tab \hich\af2\dbch\af31505\loch\f2 print li[-5:]
\par \tab \tab 
\par 
\par \hich\af2\dbch\af31505\loch\f2 printList()
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 2.10
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par \hich\af2\dbch\af31505\loch\f2 Define a function which can generate a list where the values are square of numbers between 1 and 20 (both included). Then the function needs to print all values except the first 5 elements in the list.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Use ** operator to get power of a number.
\par \hich\af2\dbch\af31505\loch\f2 Use\hich\af2\dbch\af31505\loch\f2  range() for loops.
\par \hich\af2\dbch\af31505\loch\f2 Use list.append() to add values into a list.
\par \hich\af2\dbch\af31505\loch\f2 Use [n1:n2] to slice a list
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution
\par \hich\af2\dbch\af31505\loch\f2 def printList():
\par \tab \hich\af2\dbch\af31505\loch\f2 li=list()
\par \tab \hich\af2\dbch\af31505\loch\f2 for i in range(1,21):
\par \tab \tab \hich\af2\dbch\af31505\loch\f2 li.append(i**2)
\par \tab \hich\af2\dbch\af31505\loch\f2 print li[5:]
\par \tab \tab 
\par 
\par \hich\af2\dbch\af31505\loch\f2 printList()
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 2.10
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par \hich\af2\dbch\af31505\loch\f2 Define a function which can generate and print a tuple where the value are square of numbers between 1 and 20 (both included). 
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Use ** operator to get power of a number.
\par \hich\af2\dbch\af31505\loch\f2 Use range() for loops.
\par \hich\af2\dbch\af31505\loch\f2 Use list.append() to add values into a list.
\par \hich\af2\dbch\af31505\loch\f2 Use tuple() to get a tuple from a list.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution
\par \hich\af2\dbch\af31505\loch\f2 def printTuple():
\par \tab \hich\af2\dbch\af31505\loch\f2 li=list()
\par \tab \hich\af2\dbch\af31505\loch\f2 for i in range(1,21):
\par \tab \tab \hich\af2\dbch\af31505\loch\f2 li.append(i**2)
\par \tab \hich\af2\dbch\af31505\loch\f2 print tuple(li)
\par \tab \tab 
\par \hich\af2\dbch\af31505\loch\f2 printTuple()
\par 
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 2.10
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par \hich\af2\dbch\af31505\loch\f2 With a given tuple (1,2,3,4,5,6,7,8,9,10), write a program to print the first half values in one line and the last half values in one line. 
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Use [n1:n2] notation to get a slice from a tuple.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution
\par \hich\af2\dbch\af31505\loch\f2 tp=(1,2,3,4,5,6,7,8,9,10)
\par \hich\af2\dbch\af31505\loch\f2 tp1=tp[:5]
\par \hich\af2\dbch\af31505\loch\f2 tp2=tp[5:\hich\af2\dbch\af31505\loch\f2 ]
\par \hich\af2\dbch\af31505\loch\f2 print tp1
\par \hich\af2\dbch\af31505\loch\f2 print tp2
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 2.10
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par \hich\af2\dbch\af31505\loch\f2 Write a program to generate and print another tuple whose values are even numbers in the given tuple (1,2,3,4,5,6,7,8,9,10). 
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Use "for" to iterate the tuple
\par \hich\af2\dbch\af31505\loch\f2 Use tup\hich\af2\dbch\af31505\loch\f2 le() to generate a tuple from a list.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution
\par \hich\af2\dbch\af31505\loch\f2 tp=(1,2,3,4,5,6,7,8,9,10)
\par \hich\af2\dbch\af31505\loch\f2 li=list()
\par \hich\af2\dbch\af31505\loch\f2 for i in tp:
\par \tab \hich\af2\dbch\af31505\loch\f2 if tp[i]%2==0:
\par \tab \tab \hich\af2\dbch\af31505\loch\f2 li.append(tp[i])
\par 
\par \hich\af2\dbch\af31505\loch\f2 tp2=tuple(li)
\par \hich\af2\dbch\af31505\loch\f2 print tp2
\par 
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 2.14
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par \hich\af2\dbch\af31505\loch\f2 Write a program whi\hich\af2\dbch\af31505\loch\f2 ch accepts a string as input to print "Yes" if the string is "yes" or "YES" or "Yes", otherwise print "No". 
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Use if statement to judge condition.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution
\par \hich\af2\dbch\af31505\loch\f2 s= raw_input()
\par \hich\af2\dbch\af31505\loch\f2 if s=="yes" or s=="YES" or s=="Yes":
\par \hich\af2\dbch\af31505\loch\f2     print "Yes"
\par \hich\af2\dbch\af31505\loch\f2 else:
\par \hich\af2\dbch\af31505\loch\f2     print "No"
\par 
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 3.4
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par \hich\af2\dbch\af31505\loch\f2 Write a program which can filter even numbers in a list by using filter function. The list is: [1,2,3,4,5,6,7,8,9,10].
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Use filter() to filter some elements in a list.
\par \hich\af2\dbch\af31505\loch\f2 Use lambda to define \hich\af2\dbch\af31505\loch\f2 anonymous functions.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution
\par \hich\af2\dbch\af31505\loch\f2 li = [1,2,3,4,5,6,7,8,9,10]
\par \hich\af2\dbch\af31505\loch\f2 evenNumbers = filter(lambda x: x%2==0, li)
\par \hich\af2\dbch\af31505\loch\f2 print evenNumbers
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 3.4
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par \hich\af2\dbch\af31505\loch\f2 Write a program which can map() to make a list whose elements are square of \hich\af2\dbch\af31505\loch\f2 elements in [1,2,3,4,5,6,7,8,9,10].
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Use map() to generate a list.
\par \hich\af2\dbch\af31505\loch\f2 Use lambda to define anonymous functions.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution
\par \hich\af2\dbch\af31505\loch\f2 li = [1,2,3,4,5,6,7,8,9,10]
\par \hich\af2\dbch\af31505\loch\f2 squaredNumbers = map(lambda x: x**2, li)
\par \hich\af2\dbch\af31505\loch\f2 print squaredNumbers
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 3.5
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par \hich\af2\dbch\af31505\loch\f2 Write a program which can map() and filter() to make a list whose elements are square of even number in [1,2,3,4,5,6,7,8,9,10].
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Use map() to generate a list.
\par \hich\af2\dbch\af31505\loch\f2 Use filter() to filter elements\hich\af2\dbch\af31505\loch\f2  of a list.
\par \hich\af2\dbch\af31505\loch\f2 Use lambda to define anonymous functions.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution
\par \hich\af2\dbch\af31505\loch\f2 li = [1,2,3,4,5,6,7,8,9,10]
\par \hich\af2\dbch\af31505\loch\f2 evenNumbers = map(lambda x: x**2, filter(lambda x: x%2==0, li))
\par \hich\af2\dbch\af31505\loch\f2 print evenNumbers
\par 
\par 
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 3.5
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par \hich\af2\dbch\af31505\loch\f2 Write a program which can filter() to make a list whose elements are even number between 1 and 20 (both included).
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Use filter() to filter elements of a list.
\par \hich\af2\dbch\af31505\loch\f2 Use lambda to define anonymous functions.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution
\par \hich\af2\dbch\af31505\loch\f2 evenNumbers = filter(lambda x: x%2==0\hich\af2\dbch\af31505\loch\f2 , range(1,21))
\par \hich\af2\dbch\af31505\loch\f2 print evenNumbers
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 3.5
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par \hich\af2\dbch\af31505\loch\f2 Write a program which can map() to make a list whose elements are square of numbers between 1 and 20 (both included).
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Use map() to generate a list.
\par \hich\af2\dbch\af31505\loch\f2 Use la\hich\af2\dbch\af31505\loch\f2 mbda to define anonymous functions.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution
\par \hich\af2\dbch\af31505\loch\f2 squaredNumbers = map(lambda x: x**2, range(1,21))
\par \hich\af2\dbch\af31505\loch\f2 print squaredNumbers
\par 
\par 
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 7.2
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par \hich\af2\dbch\af31505\loch\f2 Define a class named American which has a static method called printNationality.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Use @staticmethod decorator to define class static method.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution
\par \hich\af2\dbch\af31505\loch\f2 class American(object):
\par \hich\af2\dbch\af31505\loch\f2     @staticmethod
\par \hich\af2\dbch\af31505\loch\f2     def printNationality():
\par \hich\af2\dbch\af31505\loch\f2         print "America"
\par 
\par \hich\af2\dbch\af31505\loch\f2 an\hich\af2\dbch\af31505\loch\f2 American = American()
\par \hich\af2\dbch\af31505\loch\f2 anAmerican.printNationality()
\par \hich\af2\dbch\af31505\loch\f2 American.printNationality()
\par 
\par 
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par 
\par \hich\af2\dbch\af31505\loch\f2 7.2
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par \hich\af2\dbch\af31505\loch\f2 Define a class named American and its subclass NewYorker. 
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Use class Subclass(ParentClass) to define a subclass.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par 
\par \hich\af2\dbch\af31505\loch\f2 class American(object):
\par \hich\af2\dbch\af31505\loch\f2     pass
\par 
\par \hich\af2\dbch\af31505\loch\f2 class NewYorker(American):
\par \hich\af2\dbch\af31505\loch\f2     pass
\par 
\par \hich\af2\dbch\af31505\loch\f2 anAmerican = American()
\par \hich\af2\dbch\af31505\loch\f2 aNewYorker = NewYorker()
\par \hich\af2\dbch\af31505\loch\f2 print anAmerican
\par \hich\af2\dbch\af31505\loch\f2 print aNewYorker
\par 
\par 
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 7.2
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par \hich\af2\dbch\af31505\loch\f2 Define a class named Circle which can be constructed by a radius. The Circle class has a method which can compute the area. 
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Use def methodName(self) to define a method.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par 
\par \hich\af2\dbch\af31505\loch\f2 class\hich\af2\dbch\af31505\loch\f2  Circle(object):
\par \hich\af2\dbch\af31505\loch\f2     def __init__(self, r):
\par \hich\af2\dbch\af31505\loch\f2         self.radius = r
\par 
\par \hich\af2\dbch\af31505\loch\f2     def area(self):
\par \hich\af2\dbch\af31505\loch\f2         return self.radius**2*3.14
\par 
\par \hich\af2\dbch\af31505\loch\f2 aCircle = Circle(2)
\par \hich\af2\dbch\af31505\loch\f2 print aCircle.area()
\par 
\par 
\par 
\par 
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par 
\par \hich\af2\dbch\af31505\loch\f2 7.2
\par 
\par \hich\af2\dbch\af31505\loch\f2 Define a class named Rectangle which can be constructed by a length and width. The Rectangle class has a method which can compute the area. 
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Use def methodName(self) to define a method.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par 
\par \hich\af2\dbch\af31505\loch\f2 class Rectangle(object):
\par \hich\af2\dbch\af31505\loch\f2     def __init__(self, l\hich\af2\dbch\af31505\loch\f2 , w):
\par \hich\af2\dbch\af31505\loch\f2         self.length = l
\par \hich\af2\dbch\af31505\loch\f2         self.width  = w
\par 
\par \hich\af2\dbch\af31505\loch\f2     def area(self):
\par \hich\af2\dbch\af31505\loch\f2         return self.length*self.width
\par 
\par \hich\af2\dbch\af31505\loch\f2 aRectangle = Rectangle(2,10)
\par \hich\af2\dbch\af31505\loch\f2 print aRectangle.area()
\par 
\par 
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par 
\par \hich\af2\dbch\af31505\loch\f2 7.2
\par 
\par \hich\af2\dbch\af31505\loch\f2 
Define a class named Shape and its subclass Square. The Square class has an init function which takes a length as argument. Both classes have a area function which can print the area of the shape where Shape's area is 0 by default.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par 
\par \hich\af2\dbch\af31505\loch\f2 To override a m\hich\af2\dbch\af31505\loch\f2 ethod in super class, we can define a method with the same name in the super class.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par 
\par \hich\af2\dbch\af31505\loch\f2 class Shape(object):
\par \hich\af2\dbch\af31505\loch\f2     def __init__(self):
\par \hich\af2\dbch\af31505\loch\f2         pass
\par 
\par \hich\af2\dbch\af31505\loch\f2     def area(self):
\par \hich\af2\dbch\af31505\loch\f2         return 0
\par 
\par \hich\af2\dbch\af31505\loch\f2 class Square(Shape):
\par \hich\af2\dbch\af31505\loch\f2     def __init__(self, l):
\par \hich\af2\dbch\af31505\loch\f2         Shape._\hich\af2\dbch\af31505\loch\f2 _init__(self)
\par \hich\af2\dbch\af31505\loch\f2         self.length = l
\par 
\par \hich\af2\dbch\af31505\loch\f2     def area(self):
\par \hich\af2\dbch\af31505\loch\f2         return self.length*self.length
\par 
\par \hich\af2\dbch\af31505\loch\f2 aSquare= Square(3)
\par \hich\af2\dbch\af31505\loch\f2 print aSquare.area()
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 Please raise a RuntimeError exception.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Use raise() to raise an exception.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par 
\par \hich\af2\dbch\af31505\loch\f2 raise RuntimeError('something wrong')
\par 
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 Write a function to compute 5/0 and use try/except to catch the exceptions.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Use try/except to catch exceptions.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par 
\par \hich\af2\dbch\af31505\loch\f2 def throws():
\par \hich\af2\dbch\af31505\loch\f2     return 5/0
\par 
\par \hich\af2\dbch\af31505\loch\f2 try:
\par \hich\af2\dbch\af31505\loch\f2     throws()
\par \hich\af2\dbch\af31505\loch\f2 except ZeroDivisionError:
\par \hich\af2\dbch\af31505\loch\f2     print "division by zero!"
\par \hich\af2\dbch\af31505\loch\f2 except Exception, err:
\par \hich\af2\dbch\af31505\loch\f2     print 'Caught an exception'
\par \hich\af2\dbch\af31505\loch\f2 finally:
\par \hich\af2\dbch\af31505\loch\f2     print 'In finally block for cleanup'
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 #---------------------------------\hich\af2\dbch\af31505\loch\f2 -------#
\par \hich\af2\dbch\af31505\loch\f2 Define a custom exception class which takes a string message as attribute.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par 
\par \hich\af2\dbch\af31505\loch\f2 To define a custom exception, we need to define a class inherited from Exception.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par 
\par \hich\af2\dbch\af31505\loch\f2 class MyError(Exception):
\par \hich\af2\dbch\af31505\loch\f2     """My own exception class
\par 
\par \hich\af2\dbch\af31505\loch\f2     Attributes:
\par \hich\af2\dbch\af31505\loch\f2         msg  -- explanation of the error
\par \hich\af2\dbch\af31505\loch\f2     """
\par 
\par \hich\af2\dbch\af31505\loch\f2     def __init__(self, msg):
\par \hich\af2\dbch\af31505\loch\f2         self.msg = msg
\par 
\par \hich\af2\dbch\af31505\loch\f2 error = MyError("something wrong")
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Assuming that we have some email addresses in t\hich\af2\dbch\af31505\loch\f2 
he "username@companyname.com" format, please write program to print the user name of a given email address. Both user names and company names are composed of letters only.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Example:
\par \hich\af2\dbch\af31505\loch\f2 If the following email address is given as input to the program:
\par 
\par \hich\af2\dbch\af31505\loch\f2 john@goo\hich\af2\dbch\af31505\loch\f2 gle.com
\par 
\par \hich\af2\dbch\af31505\loch\f2 Then, the output of the program should be:
\par 
\par \hich\af2\dbch\af31505\loch\f2 john
\par 
\par \hich\af2\dbch\af31505\loch\f2 In case of input data being supplied to the question, it should be assumed to be a console input.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Use \\w to match letters.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par \hich\af2\dbch\af31505\loch\f2 import re
\par \hich\af2\dbch\af31505\loch\f2 emailAddress = raw_input()
\par \hich\af2\dbch\af31505\loch\f2 pat2 = "(\\w+)@((\\\hich\af2\dbch\af31505\loch\f2 w+\\.)+(com))"
\par \hich\af2\dbch\af31505\loch\f2 r2 = re.match(pat2,emailAddress)
\par \hich\af2\dbch\af31505\loch\f2 print r2.group(1)
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Assuming that we have some email addresses in the "username@companyname.com" format, please write program to print the company name of \hich\af2\dbch\af31505\loch\f2 
a given email address. Both user names and company names are composed of letters only.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Example:
\par \hich\af2\dbch\af31505\loch\f2 If the following email address is given as input to the program:
\par 
\par \hich\af2\dbch\af31505\loch\f2 john@google.com
\par 
\par \hich\af2\dbch\af31505\loch\f2 Then, the output of the program should be:
\par 
\par \hich\af2\dbch\af31505\loch\f2 google
\par 
\par \hich\af2\dbch\af31505\loch\f2 In case of input data be\hich\af2\dbch\af31505\loch\f2 ing supplied to the question, it should be assumed to be a console input.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Use \\w to match letters.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par \hich\af2\dbch\af31505\loch\f2 import re
\par \hich\af2\dbch\af31505\loch\f2 emailAddress = raw_input()
\par \hich\af2\dbch\af31505\loch\f2 pat2 = "(\\w+)@(\\w+)\\.(com)"
\par \hich\af2\dbch\af31505\loch\f2 r2 = re.match(pat2,emailAddress)
\par \hich\af2\dbch\af31505\loch\f2 print r2.group(2)
\par 
\par 
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Write a program which accepts a sequence of words separated by whitespace as input to print the words composed of digits only.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Example:
\par \hich\af2\dbch\af31505\loch\f2 If the following words is given as input to the program:
\par 
\par \hich\af2\dbch\af31505\loch\f2 2 cats \hich\af2\dbch\af31505\loch\f2 and 3 dogs.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Then, the output of the program should be:
\par 
\par \hich\af2\dbch\af31505\loch\f2 ['2', '3']
\par 
\par \hich\af2\dbch\af31505\loch\f2 In case of input data being supplied to the question, it should be assumed to be a console input.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Use re.findall() to find all substring using regex.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par \hich\af2\dbch\af31505\loch\f2 import re
\par \hich\af2\dbch\af31505\loch\f2 s = raw_input()
\par \hich\af2\dbch\af31505\loch\f2 print re.findall("\\d+",s)
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 Print a unicode string "hello world".
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Use u'strings' format to define unicode string.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par 
\par \hich\af2\dbch\af31505\loch\f2 unicodeString = u"hello world!"
\par \hich\af2\dbch\af31505\loch\f2 print unicodeStrin\hich\af2\dbch\af31505\loch\f2 g
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 Write a program to read an ASCII string and to convert it to a unicode string encoded by utf-8.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Use unicode() function to convert.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par 
\par \hich\af2\dbch\af31505\loch\f2 s = raw_input()
\par \hich\af2\dbch\af31505\loch\f2 u = unicode( s ,"utf-8")
\par \hich\af2\dbch\af31505\loch\f2 print u
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Write a special comment to indicate a Python source code file is in unicode.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par 
\par \hich\af2\dbch\af31505\loch\f2 # -*- coding: utf-8 -*-
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Write a program to compute\hich\af2\dbch\af31505\loch\f2  1/2+2/3+3/4+...+n/n+1 with a given n input by console (n>0).
\par 
\par \hich\af2\dbch\af31505\loch\f2 Example:
\par \hich\af2\dbch\af31505\loch\f2 If the following n is given as input to the program:
\par 
\par \hich\af2\dbch\af31505\loch\f2 5
\par 
\par \hich\af2\dbch\af31505\loch\f2 Then, the output of the program should be:
\par 
\par \hich\af2\dbch\af31505\loch\f2 3.55
\par 
\par \hich\af2\dbch\af31505\loch\f2 In case of input data being supplied to the question, it should be assumed to be a console input.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par \hich\af2\dbch\af31505\loch\f2 Use float() to convert an integer to a float
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par 
\par \hich\af2\dbch\af31505\loch\f2 n=int(raw_input())
\par \hich\af2\dbch\af31505\loch\f2 sum=0.0
\par \hich\af2\dbch\af31505\loch\f2 for i in range(1,n+1):
\par \hich\af2\dbch\af31505\loch\f2     sum += float(float(i)/(i+1))
\par \hich\af2\dbch\af31505\loch\f2 print sum
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Write a program to compute:
\par 
\par \hich\af2\dbch\af31505\loch\f2 f(n)=f(n-1)+100 when n>0
\par \hich\af2\dbch\af31505\loch\f2 and f(0)=1
\par 
\par \hich\af2\dbch\af31505\loch\f2 with a given n input by console (n>0).
\par 
\par \hich\af2\dbch\af31505\loch\f2 Example:
\par \hich\af2\dbch\af31505\loch\f2 If the following n is given as input to the program:
\par 
\par \hich\af2\dbch\af31505\loch\f2 5
\par 
\par \hich\af2\dbch\af31505\loch\f2 Then, the output of the program should be:
\par 
\par \hich\af2\dbch\af31505\loch\f2 500
\par 
\par \hich\af2\dbch\af31505\loch\f2 In case of input data being supplied to the question, it should be assumed to be a console input.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par \hich\af2\dbch\af31505\loch\f2 We can define recursive function in Python.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par 
\par \hich\af2\dbch\af31505\loch\f2 def f(n):
\par \hich\af2\dbch\af31505\loch\f2     if n==0:
\par \hich\af2\dbch\af31505\loch\f2         return 0
\par \hich\af2\dbch\af31505\loch\f2     e\hich\af2\dbch\af31505\loch\f2 lse:
\par \hich\af2\dbch\af31505\loch\f2         return f(n-1)+100
\par 
\par \hich\af2\dbch\af31505\loch\f2 n=int(raw_input())
\par \hich\af2\dbch\af31505\loch\f2 print f(n)
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 The Fibonacci Sequence is computed based on the following formula:
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 f(n)=0 if n=0
\par \hich\af2\dbch\af31505\loch\f2 f(n)=1 if n=1
\par \hich\af2\dbch\af31505\loch\f2 f(n)=f(n-1)+f(n-2) if n>1
\par 
\par \hich\af2\dbch\af31505\loch\f2 Ple\hich\af2\dbch\af31505\loch\f2 ase write a program to compute the value of f(n) with a given n input by console.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Example:
\par \hich\af2\dbch\af31505\loch\f2 If the following n is given as input to the program:
\par 
\par \hich\af2\dbch\af31505\loch\f2 7
\par 
\par \hich\af2\dbch\af31505\loch\f2 Then, the output of the program should be:
\par 
\par \hich\af2\dbch\af31505\loch\f2 13
\par 
\par \hich\af2\dbch\af31505\loch\f2 In case of input data being supplied to the question, it sh\hich\af2\dbch\af31505\loch\f2 ould be assumed to be a console input.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par \hich\af2\dbch\af31505\loch\f2 We can define recursive function in Python.
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par 
\par \hich\af2\dbch\af31505\loch\f2 def f(n):
\par \hich\af2\dbch\af31505\loch\f2     if n == 0: return 0
\par \hich\af2\dbch\af31505\loch\f2     elif n == 1: return 1
\par \hich\af2\dbch\af31505\loch\f2     else: return f(n-1)+f(n-2)
\par 
\par \hich\af2\dbch\af31505\loch\f2 n=int(raw_input())
\par \hich\af2\dbch\af31505\loch\f2 print f(n)
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par 
\par \hich\af2\dbch\af31505\loch\f2 The Fibonacci Sequence is computed based on the following formula:
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 f(n)=0 if n=0
\par \hich\af2\dbch\af31505\loch\f2 f(n)=1 if n=1
\par \hich\af2\dbch\af31505\loch\f2 f(n)=f(n-1)+f(n-2) if n>1
\par 
\par \hich\af2\dbch\af31505\loch\f2 Please write a program using list\hich\af2\dbch\af31505\loch\f2  comprehension to print the Fibonacci Sequence in comma separated form with a given n input by console.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Example:
\par \hich\af2\dbch\af31505\loch\f2 If the following n is given as input to the program:
\par 
\par \hich\af2\dbch\af31505\loch\f2 7
\par 
\par \hich\af2\dbch\af31505\loch\f2 Then, the output of the program should be:
\par 
\par \hich\af2\dbch\af31505\loch\f2 0,1,1,2,3,5,8,13
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par \hich\af2\dbch\af31505\loch\f2 We can define recursive function in Python.
\par \hich\af2\dbch\af31505\loch\f2 Use list comprehension to generate a list from an existing list.
\par \hich\af2\dbch\af31505\loch\f2 Use string.join() to join a list of strings.
\par 
\par \hich\af2\dbch\af31505\loch\f2 In case of input data being supplied to the question, it should be assumed to be a console input.
\par 
\par \hich\af2\dbch\af31505\loch\f2 So\hich\af2\dbch\af31505\loch\f2 lution:
\par 
\par \hich\af2\dbch\af31505\loch\f2 def f(n):
\par \hich\af2\dbch\af31505\loch\f2     if n == 0: return 0
\par \hich\af2\dbch\af31505\loch\f2     elif n == 1: return 1
\par \hich\af2\dbch\af31505\loch\f2     else: return f(n-1)+f(n-2)
\par 
\par \hich\af2\dbch\af31505\loch\f2 n=int(raw_input())
\par \hich\af2\dbch\af31505\loch\f2 values = [str(f(x)) for x in range(0, n+1)]
\par \hich\af2\dbch\af31505\loch\f2 print ",".join(values)
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Please write a program using generator to print the even numbers between 0 and n in comma separated form while n is input by console.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Example:
\par \hich\af2\dbch\af31505\loch\f2 If the following n is given as input to the program:
\par 
\par \hich\af2\dbch\af31505\loch\f2 10
\par 
\par \hich\af2\dbch\af31505\loch\f2 Then, the output of the program should be:
\par 
\par \hich\af2\dbch\af31505\loch\f2 0,2,4,6,8,\hich\af2\dbch\af31505\loch\f2 10
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par \hich\af2\dbch\af31505\loch\f2 Use yield to produce the next value in generator.
\par 
\par \hich\af2\dbch\af31505\loch\f2 In case of input data being supplied to the question, it should be assumed to be a console input.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par 
\par \hich\af2\dbch\af31505\loch\f2 def EvenGenerator(n):
\par \hich\af2\dbch\af31505\loch\f2     i=0
\par \hich\af2\dbch\af31505\loch\f2     while i<=n:
\par \hich\af2\dbch\af31505\loch\f2         if i%2==0:
\par \hich\af2\dbch\af31505\loch\f2             yield i
\par \hich\af2\dbch\af31505\loch\f2         i+=1
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 n=int(raw_input())
\par \hich\af2\dbch\af31505\loch\f2 values = []
\par \hich\af2\dbch\af31505\loch\f2 for i in EvenGenerator(n):
\par \hich\af2\dbch\af31505\loch\f2     values.append(str(i))
\par 
\par \hich\af2\dbch\af31505\loch\f2 print ",".join(values)
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Please write a program using generator to print the numbers which can be divisible by 5 and 7 between 0 and n in comma separated form while n is input by console.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Example:
\par \hich\af2\dbch\af31505\loch\f2 If the following n is given as input to the program:
\par 
\par \hich\af2\dbch\af31505\loch\f2 100
\par 
\par \hich\af2\dbch\af31505\loch\f2 Then, the output of the \hich\af2\dbch\af31505\loch\f2 program should be:
\par 
\par \hich\af2\dbch\af31505\loch\f2 0,35,70
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par \hich\af2\dbch\af31505\loch\f2 Use yield to produce the next value in generator.
\par 
\par \hich\af2\dbch\af31505\loch\f2 In case of input data being supplied to the question, it should be assumed to be a console input.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par 
\par \hich\af2\dbch\af31505\loch\f2 def NumGenerator(n):
\par \hich\af2\dbch\af31505\loch\f2     for i in range(n+1):
\par \hich\af2\dbch\af31505\loch\f2         if i%5==0 and i%7==0:
\par \hich\af2\dbch\af31505\loch\f2             yield i
\par 
\par \hich\af2\dbch\af31505\loch\f2 n=int(raw_input())
\par \hich\af2\dbch\af31505\loch\f2 values = []
\par \hich\af2\dbch\af31505\loch\f2 for i in NumGenerator(n):
\par \hich\af2\dbch\af31505\loch\f2     values.append(str(i))
\par 
\par \hich\af2\dbch\af31505\loch\f2 print ",".join(values)
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 Please write assert statements to verify\hich\af2\dbch\af31505\loch\f2  that every number in the list [2,4,6,8] is even.
\par 
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par \hich\af2\dbch\af31505\loch\f2 Use "assert expression" to make assertion.
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par 
\par \hich\af2\dbch\af31505\loch\f2 li = [2,4,6,8]
\par \hich\af2\dbch\af31505\loch\f2 for i in li:
\par \hich\af2\dbch\af31505\loch\f2     assert i%2==0
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Please write a program which accepts basic mathematic expression from console and print the evaluation result.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Example:
\par \hich\af2\dbch\af31505\loch\f2 If the following string is given as input to the program:
\par 
\par \hich\af2\dbch\af31505\loch\f2 35+3
\par 
\par \hich\af2\dbch\af31505\loch\f2 Then, the output of the program should be:
\par 
\par \hich\af2\dbch\af31505\loch\f2 38
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par \hich\af2\dbch\af31505\loch\f2 Use eval() to e\hich\af2\dbch\af31505\loch\f2 valuate an expression.
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par 
\par \hich\af2\dbch\af31505\loch\f2 expression = raw_input()
\par \hich\af2\dbch\af31505\loch\f2 print eval(expression)
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Please write a binary search function which searches an item in a sorted list. The function should return\hich\af2\dbch\af31505\loch\f2  the index of element to be searched in the list.
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par \hich\af2\dbch\af31505\loch\f2 Use if/elif to deal with conditions.
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par 
\par \hich\af2\dbch\af31505\loch\f2 import math
\par \hich\af2\dbch\af31505\loch\f2 def bin_search(li, element):
\par \hich\af2\dbch\af31505\loch\f2     bottom = 0
\par \hich\af2\dbch\af31505\loch\f2     top = len(li)-1
\par \hich\af2\dbch\af31505\loch\f2     index = -1
\par \hich\af2\dbch\af31505\loch\f2     while top>=bottom and index==-1:
\par \hich\af2\dbch\af31505\loch\f2         mid = int(m\hich\af2\dbch\af31505\loch\f2 ath.floor((top+bottom)/2.0))
\par \hich\af2\dbch\af31505\loch\f2         if li[mid]==element:
\par \hich\af2\dbch\af31505\loch\f2             index = mid
\par \hich\af2\dbch\af31505\loch\f2         elif li[mid]>element:
\par \hich\af2\dbch\af31505\loch\f2             top = mid-1
\par \hich\af2\dbch\af31505\loch\f2         else:
\par \hich\af2\dbch\af31505\loch\f2             bottom = mid+1
\par 
\par \hich\af2\dbch\af31505\loch\f2     return index
\par 
\par \hich\af2\dbch\af31505\loch\f2 li=[2,5,7,9,11,17,222]
\par \hich\af2\dbch\af31505\loch\f2 print bin_search(li,11)
\par \hich\af2\dbch\af31505\loch\f2 print bin_search(li,12)
\par 
\par 
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Please write a binary search function which searches an item in a sorted list. The function should return the index of element to be searched in the list.
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par \hich\af2\dbch\af31505\loch\f2 Use if/eli\hich\af2\dbch\af31505\loch\f2 f to deal with conditions.
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par 
\par \hich\af2\dbch\af31505\loch\f2 import math
\par \hich\af2\dbch\af31505\loch\f2 def bin_search(li, element):
\par \hich\af2\dbch\af31505\loch\f2     bottom = 0
\par \hich\af2\dbch\af31505\loch\f2     top = len(li)-1
\par \hich\af2\dbch\af31505\loch\f2     index = -1
\par \hich\af2\dbch\af31505\loch\f2     while top>=bottom and index==-1:
\par \hich\af2\dbch\af31505\loch\f2         mid = int(math.floor((top+bottom)/2.0))
\par \hich\af2\dbch\af31505\loch\f2         if li[mid]==element:
\par \hich\af2\dbch\af31505\loch\f2             index = mid
\par \hich\af2\dbch\af31505\loch\f2         elif li[mid]>element:
\par \hich\af2\dbch\af31505\loch\f2             top = mid-1
\par \hich\af2\dbch\af31505\loch\f2         else:
\par \hich\af2\dbch\af31505\loch\f2             bottom = mid+1
\par 
\par \hich\af2\dbch\af31505\loch\f2     return index
\par 
\par \hich\af2\dbch\af31505\loch\f2 li=[2,5,7,9,11,17,222]
\par \hich\af2\dbch\af31505\loch\f2 print bin_search(li,11)
\par \hich\af2\dbch\af31505\loch\f2 print bin_search(li,12)
\par 
\par 
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Please generate a random float where the value is between 10 and 100 using Python math module.
\par 
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par \hich\af2\dbch\af31505\loch\f2 Use random.random() to generate a random float in [0,1].
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par 
\par \hich\af2\dbch\af31505\loch\f2 import random
\par \hich\af2\dbch\af31505\loch\f2 print random.random()*100
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Please generate a random float where the value is between 5 and 95 using Python math module.
\par 
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par \hich\af2\dbch\af31505\loch\f2 Use random.random() to generate a random float in [0,1].
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par 
\par \hich\af2\dbch\af31505\loch\f2 import random
\par \hich\af2\dbch\af31505\loch\f2 print random.ra\hich\af2\dbch\af31505\loch\f2 ndom()*100-5
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Please write a program to output a random even number between 0 and 10 inclusive using random module and list comprehension.
\par 
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par \hich\af2\dbch\af31505\loch\f2 Use random.choice() to a random element from a list.
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par 
\par \hich\af2\dbch\af31505\loch\f2 import random
\par \hich\af2\dbch\af31505\loch\f2 print random.choice([i for i in range(11) if i%2==0])
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Please write a program to output a random number, which is divisible by 5 and 7, between 0 and 10 inclusive using rand\hich\af2\dbch\af31505\loch\f2 om module and list comprehension.
\par 
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par \hich\af2\dbch\af31505\loch\f2 Use random.choice() to a random element from a list.
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par 
\par \hich\af2\dbch\af31505\loch\f2 import random
\par \hich\af2\dbch\af31505\loch\f2 print random.choice([i for i in range(201) if i%5==0 and i%7==0])
\par 
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Please write a program to generate a list with 5 random numbers between 100 and 200 inclusive.
\par 
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par \hich\af2\dbch\af31505\loch\f2 Use random.sample() to generate a list of random values.
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par 
\par \hich\af2\dbch\af31505\loch\f2 import random
\par \hich\af2\dbch\af31505\loch\f2 print random.sample(range(100), 5)
\par 
\par \hich\af2\dbch\af31505\loch\f2 #------------------------------\hich\af2\dbch\af31505\loch\f2 ----------#
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Please write a program to randomly generate a list with 5 even numbers between 100 and 200 inclusive.
\par 
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par \hich\af2\dbch\af31505\loch\f2 Use random.sample() to generate a list of random values.
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par 
\par \hich\af2\dbch\af31505\loch\f2 import random
\par \hich\af2\dbch\af31505\loch\f2 print random.sample([i for i in range(100,201) if i%2==0], 5)
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Please write a program to randomly generate a list with 5 numbers, which are divisible by 5 and 7 , between 1 and 1000 inclusive.
\par 
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints\hich\af2\dbch\af31505\loch\f2 :
\par \hich\af2\dbch\af31505\loch\f2 Use random.sample() to generate a list of random values.
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par 
\par \hich\af2\dbch\af31505\loch\f2 import random
\par \hich\af2\dbch\af31505\loch\f2 print random.sample([i for i in range(1,1001) if i%5==0 and i%7==0], 5)
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Please write a program to randomly print a integer number between 7 and 15 inclusive.
\par 
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par \hich\af2\dbch\af31505\loch\f2 Use random.randrange() to a random integer in a given range.
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par 
\par \hich\af2\dbch\af31505\loch\f2 import random
\par \hich\af2\dbch\af31505\loch\f2 print random.randrange(7,16)
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Please write a program to compress and decompress the string "hello world!hello world!hello world!hello world!".
\par 
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par \hich\af2\dbch\af31505\loch\f2 Use zlib.compress() and zlib.decompress() to compress and decompress a string.
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par 
\par \hich\af2\dbch\af31505\loch\f2 import zlib
\par \hich\af2\dbch\af31505\loch\f2 s = 'hello world!hello world!hello world!hello world!'
\par \hich\af2\dbch\af31505\loch\f2 t = zlib.compress(s)
\par \hich\af2\dbch\af31505\loch\f2 print t
\par \hich\af2\dbch\af31505\loch\f2 print zlib.decompress(t)
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Please write a program to print the running time of execution of "1+1" for 100 times.
\par 
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hin\hich\af2\dbch\af31505\loch\f2 ts:
\par \hich\af2\dbch\af31505\loch\f2 Use timeit() function to measure the running time.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par 
\par \hich\af2\dbch\af31505\loch\f2 from timeit import Timer
\par \hich\af2\dbch\af31505\loch\f2 t = Timer("for i in range(100):1+1")
\par \hich\af2\dbch\af31505\loch\f2 print t.timeit()
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Please write a program to shuffle and print the list [3\hich\af2\dbch\af31505\loch\f2 ,6,7,8].
\par 
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par \hich\af2\dbch\af31505\loch\f2 Use shuffle() function to shuffle a list.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par 
\par \hich\af2\dbch\af31505\loch\f2 from random import shuffle
\par \hich\af2\dbch\af31505\loch\f2 li = [3,6,7,8]
\par \hich\af2\dbch\af31505\loch\f2 shuffle(li)
\par \hich\af2\dbch\af31505\loch\f2 print li
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Please write a program to shuffle and print the list [3,6,7,8].
\par 
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par \hich\af2\dbch\af31505\loch\f2 Use shuffle() function to shuffle a list.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par 
\par \hich\af2\dbch\af31505\loch\f2 from random import shuffle
\par \hich\af2\dbch\af31505\loch\f2 li = [3,6,7,8]
\par \hich\af2\dbch\af31505\loch\f2 shuffle(li)
\par \hich\af2\dbch\af31505\loch\f2 print li
\par 
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Please write a program to generate all sentences where subject is in ["I", "You"] and verb is in ["Play", "Love"] and the object is in ["Hockey","Football"].
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par \hich\af2\dbch\af31505\loch\f2 Use list[index] notation to get a element from a list.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par 
\par \hich\af2\dbch\af31505\loch\f2 subjects=["I", "You"]
\par \hich\af2\dbch\af31505\loch\f2 v\hich\af2\dbch\af31505\loch\f2 erbs=["Play", "Love"]
\par \hich\af2\dbch\af31505\loch\f2 objects=["Hockey","Football"]
\par \hich\af2\dbch\af31505\loch\f2 for i in range(len(subjects)):
\par \hich\af2\dbch\af31505\loch\f2     for j in range(len(verbs)):
\par \hich\af2\dbch\af31505\loch\f2         for k in range(len(objects)):
\par \hich\af2\dbch\af31505\loch\f2             sentence = "%s %s %s." % (subjects[i], verbs[j], objects[k])
\par \hich\af2\dbch\af31505\loch\f2             print sentence
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 #\hich\af2\dbch\af31505\loch\f2 ----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 Please write a program to print the list after removing delete even numbers in [5,6,77,45,22,12,24].
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par \hich\af2\dbch\af31505\loch\f2 Use list comprehension to delete a bunch of element from a list.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par 
\par \hich\af2\dbch\af31505\loch\f2 li = [5,6,77,45,22,12,24]
\par \hich\af2\dbch\af31505\loch\f2 li = [x for x in li if x%2!=0]
\par \hich\af2\dbch\af31505\loch\f2 print li
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par 
\par \hich\af2\dbch\af31505\loch\f2 By using list comprehension, please write a program to print the list after removing delete numbers which are divisible by 5 and 7 in [12,24,35,70,88,120,155].
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par \hich\af2\dbch\af31505\loch\f2 Use list comprehension to delete a bunch of element from a list.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par 
\par \hich\af2\dbch\af31505\loch\f2 li = [12,24,35,70,88,120,155]
\par \hich\af2\dbch\af31505\loch\f2 li = [x for x in li if x%5!=0 and x%7!=0]
\par \hich\af2\dbch\af31505\loch\f2 print li
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par 
\par \hich\af2\dbch\af31505\loch\f2 By using list comprehension, please\hich\af2\dbch\af31505\loch\f2  write a program to print the list after removing the 0th, 2nd, 4th,6th numbers in [12,24,35,70,88,120,155].
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par \hich\af2\dbch\af31505\loch\f2 Use list comprehension to delete a bunch of element from a list.
\par \hich\af2\dbch\af31505\loch\f2 Use enumerate() to get (index, value) tuple.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par 
\par \hich\af2\dbch\af31505\loch\f2 li = [12,24,35,70,88,120,155]
\par \hich\af2\dbch\af31505\loch\f2 li = [x for (i,x) in enumerate(li) if i%2!=0]
\par \hich\af2\dbch\af31505\loch\f2 print li
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par 
\par \hich\af2\dbch\af31505\loch\f2 By using list comprehension, please write a program generate a 3*5*8 3D array whose each element is 0.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par \hich\af2\dbch\af31505\loch\f2 Use \hich\af2\dbch\af31505\loch\f2 list comprehension to make an array.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par 
\par \hich\af2\dbch\af31505\loch\f2 array = [[ [0 for col in range(8)] for col in range(5)] for row in range(3)]
\par \hich\af2\dbch\af31505\loch\f2 print array
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par 
\par \hich\af2\dbch\af31505\loch\f2 By using list comprehension, please write a program to print th\hich\af2\dbch\af31505\loch\f2 e list after removing the 0th,4th,5th numbers in [12,24,35,70,88,120,155].
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par \hich\af2\dbch\af31505\loch\f2 Use list comprehension to delete a bunch of element from a list.
\par \hich\af2\dbch\af31505\loch\f2 Use enumerate() to get (index, value) tuple.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par 
\par \hich\af2\dbch\af31505\loch\f2 li = [12,24,35,70,88,120,155]
\par \hich\af2\dbch\af31505\loch\f2 li = [x for (i,x) in enumerate(li) if i not in (0,4,5)]
\par \hich\af2\dbch\af31505\loch\f2 print li
\par 
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par 
\par \hich\af2\dbch\af31505\loch\f2 By using list comprehension, please write a program to print the list after removing the value 24 in [12,24,35,24,88,120,155].
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints\hich\af2\dbch\af31505\loch\f2 :
\par \hich\af2\dbch\af31505\loch\f2 Use list's remove method to delete a value.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par 
\par \hich\af2\dbch\af31505\loch\f2 li = [12,24,35,24,88,120,155]
\par \hich\af2\dbch\af31505\loch\f2 li = [x for x in li if x!=24]
\par \hich\af2\dbch\af31505\loch\f2 print li
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par 
\par \hich\af2\dbch\af31505\loch\f2 With two given lists [1,3,6,78,35,55] and [12,24,35,24,88,120,155], write a program to make a list whose elements are intersection of the above given lists.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par \hich\af2\dbch\af31505\loch\f2 Use set() and "&=" to do set intersection operation.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par 
\par \hich\af2\dbch\af31505\loch\f2 set1=set([1,3,6,78,35,55])
\par \hich\af2\dbch\af31505\loch\f2 set2=set([12,24,35,24,88,120,155])
\par \hich\af2\dbch\af31505\loch\f2 set1 &= set2
\par \hich\af2\dbch\af31505\loch\f2 li=list(set1)
\par \hich\af2\dbch\af31505\loch\f2 print li
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par 
\par \hich\af2\dbch\af31505\loch\f2 With a given list [12,24,35,24,88,120,155,88,120,155], write a program to print this list after removing all duplicate values with original\hich\af2\dbch\af31505\loch\f2  order reserved.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par \hich\af2\dbch\af31505\loch\f2 Use set() to store a number of values without duplicate.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par 
\par \hich\af2\dbch\af31505\loch\f2 def removeDuplicate( li ):
\par \hich\af2\dbch\af31505\loch\f2     newli=[]
\par \hich\af2\dbch\af31505\loch\f2     seen = set()
\par \hich\af2\dbch\af31505\loch\f2     for item in li:
\par \hich\af2\dbch\af31505\loch\f2         if item not in seen:
\par \hich\af2\dbch\af31505\loch\f2             seen.add( item )
\par \hich\af2\dbch\af31505\loch\f2             newli.append(item)
\par 
\par \hich\af2\dbch\af31505\loch\f2     return newli
\par 
\par \hich\af2\dbch\af31505\loch\f2 li=[12,24,35,24,88,120,155,88,120,155]
\par \hich\af2\dbch\af31505\loch\f2 print removeDuplicate(li)
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Define a class Person and its two child classes: Male and Female. All classes have a \hich\af2\dbch\af31505\loch\f2 method "getGender" which can print "Male" for Male class and "Female" for Female class.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par \hich\af2\dbch\af31505\loch\f2 Use Subclass(Parentclass) to define a child class.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par 
\par \hich\af2\dbch\af31505\loch\f2 class Person(object):
\par \hich\af2\dbch\af31505\loch\f2     def getGender( self ):
\par \hich\af2\dbch\af31505\loch\f2         return "Unknown"
\par 
\par \hich\af2\dbch\af31505\loch\f2 class Male( Person ):
\par \hich\af2\dbch\af31505\loch\f2     def getGender( self ):
\par \hich\af2\dbch\af31505\loch\f2         return "Male"
\par 
\par \hich\af2\dbch\af31505\loch\f2 class Female( Person ):
\par \hich\af2\dbch\af31505\loch\f2     def getGender( self ):
\par \hich\af2\dbch\af31505\loch\f2         return "Female"
\par 
\par \hich\af2\dbch\af31505\loch\f2 aMale = Male()
\par \hich\af2\dbch\af31505\loch\f2 aFemale= Female()
\par \hich\af2\dbch\af31505\loch\f2 print aMale.getGender()
\par \hich\af2\dbch\af31505\loch\f2 print aFemale.getGender()
\par 
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Please write a program which count and print the numbers of each character in a string input by console.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Example:
\par \hich\af2\dbch\af31505\loch\f2 If the following string is given as input to the program:
\par 
\par \hich\af2\dbch\af31505\loch\f2 abcdefgabc
\par 
\par \hich\af2\dbch\af31505\loch\f2 Then, the output of the program should be:
\par 
\par \hich\af2\dbch\af31505\loch\f2 a,2
\par \hich\af2\dbch\af31505\loch\f2 c,2
\par \hich\af2\dbch\af31505\loch\f2 b,2
\par \hich\af2\dbch\af31505\loch\f2 e,1
\par \hich\af2\dbch\af31505\loch\f2 d,1
\par \hich\af2\dbch\af31505\loch\f2 g,1
\par \hich\af2\dbch\af31505\loch\f2 f,1
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par \hich\af2\dbch\af31505\loch\f2 Use dict to store key/value pairs.
\par \hich\af2\dbch\af31505\loch\f2 Use dict.get() method to lookup a key with default value.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par 
\par \hich\af2\dbch\af31505\loch\f2 dic = \{\}
\par \hich\af2\dbch\af31505\loch\f2 s=raw_input()
\par \hich\af2\dbch\af31505\loch\f2 for s in s:
\par \hich\af2\dbch\af31505\loch\f2     dic[s] = dic.get(s,0)+1
\par \hich\af2\dbch\af31505\loch\f2 print '\\n'.join(['%s,%s' % (k, v) for k, v in dic.items()])
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Please write a program which accepts a string from console and print it in reverse order.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Example:
\par \hich\af2\dbch\af31505\loch\f2 If the following string is given as input to the program:
\par 
\par \hich\af2\dbch\af31505\loch\f2 rise to vote sir
\par 
\par \hich\af2\dbch\af31505\loch\f2 Then, the output of the \hich\af2\dbch\af31505\loch\f2 program should be:
\par 
\par \hich\af2\dbch\af31505\loch\f2 ris etov ot esir
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par \hich\af2\dbch\af31505\loch\f2 Use list[::-1] to iterate a list in a reverse order.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par 
\par \hich\af2\dbch\af31505\loch\f2 s=raw_input()
\par \hich\af2\dbch\af31505\loch\f2 s = s[::-1]
\par \hich\af2\dbch\af31505\loch\f2 print s
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Please write a program which accepts a string from console and print the characters that have even indexes.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Example:
\par \hich\af2\dbch\af31505\loch\f2 If the following string is given as input to the program:
\par 
\par \hich\af2\dbch\af31505\loch\f2 H1e2l3l4o5w6o7r8l9d
\par 
\par \hich\af2\dbch\af31505\loch\f2 Then, the output of the program should be:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Helloworld
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hi\hich\af2\dbch\af31505\loch\f2 nts:
\par \hich\af2\dbch\af31505\loch\f2 Use list[::2] to iterate a list by step 2.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par 
\par \hich\af2\dbch\af31505\loch\f2 s=raw_input()
\par \hich\af2\dbch\af31505\loch\f2 s = s[::2]
\par \hich\af2\dbch\af31505\loch\f2 print s
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Please write a program which prints all permutations of [1,2,3]
\par 
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hints:
\par \hich\af2\dbch\af31505\loch\f2 Use itertools.permutations() to get permutations of list.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par 
\par \hich\af2\dbch\af31505\loch\f2 import itertools
\par \hich\af2\dbch\af31505\loch\f2 print list(itertools.permutations([1,2,3]))
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par \hich\af2\dbch\af31505\loch\f2 Question:
\par 
\par \hich\af2\dbch\af31505\loch\f2 Write a program to solve a classic ancient Chinese puzzle: 
\par \hich\af2\dbch\af31505\loch\f2 We count 3\hich\af2\dbch\af31505\loch\f2 5 heads and 94 legs among the chickens and rabbits in a farm. How many rabbits and how many chickens do we have?
\par 
\par \hich\af2\dbch\af31505\loch\f2 Hint:
\par \hich\af2\dbch\af31505\loch\f2 Use for loop to iterate all possible solutions.
\par 
\par \hich\af2\dbch\af31505\loch\f2 Solution:
\par 
\par \hich\af2\dbch\af31505\loch\f2 def solve(numheads,numlegs):
\par \hich\af2\dbch\af31505\loch\f2     ns='No solutions!'
\par \hich\af2\dbch\af31505\loch\f2     for i in range(numheads+1):
\par \hich\af2\dbch\af31505\loch\f2         j=numheads-i
\par \hich\af2\dbch\af31505\loch\f2         if 2*i+4*j==numlegs:
\par \hich\af2\dbch\af31505\loch\f2             return i,j
\par \hich\af2\dbch\af31505\loch\f2     return ns,ns
\par 
\par \hich\af2\dbch\af31505\loch\f2 numheads=35
\par \hich\af2\dbch\af31505\loch\f2 numlegs=94
\par \hich\af2\dbch\af31505\loch\f2 solutions=solve(numheads,numlegs)
\par \hich\af2\dbch\af31505\loch\f2 print solutions
\par 
\par \hich\af2\dbch\af31505\loch\f2 #----------------------------------------#
\par 
\par 
\par }{\rtlch\fcs1 \af2 \ltrch\fcs0 \f2\insrsid2501652 
\par }{\*\themedata 504b030414000600080000002100e9de0fbfff0000001c020000130000005b436f6e74656e745f54797065735d2e786d6cac91cb4ec3301045f748fc83e52d4a
9cb2400825e982c78ec7a27cc0c8992416c9d8b2a755fbf74cd25442a820166c2cd933f79e3be372bd1f07b5c3989ca74aaff2422b24eb1b475da5df374fd9ad
5689811a183c61a50f98f4babebc2837878049899a52a57be670674cb23d8e90721f90a4d2fa3802cb35762680fd800ecd7551dc18eb899138e3c943d7e503b6
b01d583deee5f99824e290b4ba3f364eac4a430883b3c092d4eca8f946c916422ecab927f52ea42b89a1cd59c254f919b0e85e6535d135a8de20f20b8c12c3b0
0c895fcf6720192de6bf3b9e89ecdbd6596cbcdd8eb28e7c365ecc4ec1ff1460f53fe813d3cc7f5b7f020000ffff0300504b030414000600080000002100a5d6
a7e7c0000000360100000b0000005f72656c732f2e72656c73848fcf6ac3300c87ef85bd83d17d51d2c31825762fa590432fa37d00e1287f68221bdb1bebdb4f
c7060abb0884a4eff7a93dfeae8bf9e194e720169aaa06c3e2433fcb68e1763dbf7f82c985a4a725085b787086a37bdbb55fbc50d1a33ccd311ba548b6309512
0f88d94fbc52ae4264d1c910d24a45db3462247fa791715fd71f989e19e0364cd3f51652d73760ae8fa8c9ffb3c330cc9e4fc17faf2ce545046e37944c69e462
a1a82fe353bd90a865aad41ed0b5b8f9d6fd010000ffff0300504b0304140006000800000021006b799616830000008a0000001c0000007468656d652f746865
6d652f7468656d654d616e616765722e786d6c0ccc4d0ac3201040e17da17790d93763bb284562b2cbaebbf600439c1a41c7a0d29fdbd7e5e38337cedf14d59b
4b0d592c9c070d8a65cd2e88b7f07c2ca71ba8da481cc52c6ce1c715e6e97818c9b48d13df49c873517d23d59085adb5dd20d6b52bd521ef2cdd5eb9246a3d8b
4757e8d3f729e245eb2b260a0238fd010000ffff0300504b03041400060008000000210007b740aaca0600008f1a0000160000007468656d652f7468656d652f
7468656d65312e786d6cec595b8bdb46147e2ff43f08bd3bbe49be2cf1065bb69336bb49889d943cceda636bb2238dd18c776342a0244f7d2914d2d28706fad6
87521a68a0a12ffd310b1bdaf447f4cc489667ec71f6420aa1640d8b34face996fce39face48ba7aed51449d239c70c2e2965bbe52721d1c8fd898c4d3967b6f
d82f345c870b148f1165316eb90bccdd6bbb9f7e7215ed881047d801fb98efa0961b0a31db2916f9088611bfc26638866b13964448c069322d8e13740c7e235a
ac944ab5628448ec3a318ac0ededc9848cb033942edddda5f31e85d358703930a2c940bac68685c28e0fcb12c1173ca089738468cb8579c6ec78881f09d7a188
0bb8d0724beacf2dee5e2da29dcc888a2db69a5d5ffd657699c1f8b0a2e64ca607f9a49ee77bb576ee5f01a8d8c4f5eabd5aaf96fb5300341ac14a532eba4fbf
d3ec74fd0cab81d2438bef6ebd5b2d1b78cd7f758373db973f03af40a97f6f03dfef07104503af4029dedfc07b5ebd1278065e81527c6d035f2fb5bb5eddc02b
5048497cb8812ef9b56ab05c6d0e99307ac30a6ffa5ebf5ec99caf50500d7975c929262c16db6a2d420f59d2078004522448ec88c50c4fd008aa3840941c24c4
d923d3100a6f8662c661b85429f54b55f82f7f9e3a5211413b1869d6921730e11b43928fc34709998996fb39787535c8e9ebd7274f5f9d3cfdfde4d9b393a7bf
66732b5786dd0d144f75bbb73f7df3cf8b2f9dbf7ffbf1edf36fd3a9d7f15cc7bff9e5ab377ffcf92ef7b0e255284ebf7bf9e6d5cbd3efbffeebe7e716efed04
1de8f0218930776ee163e72e8b608116fef820b998c5304444b768c7538e622467b1f8ef89d040df5a208a2cb80e36e3783f01a9b101afcf1f1a8407613217c4
e2f1661819c07dc6688725d628dc947369611ecee3a97df264aee3ee2274649b3b40b191e5de7c061a4b6c2e83101b34ef50140b34c531168ebcc60e31b6acee
0121465cf7c928619c4d84f380381d44ac21199203a39a56463748047959d80842be8dd8ecdf773a8cda56ddc5472612ee0d442de487981a61bc8ee602453697
4314513de07b48843692834532d2713d2e20d3534c99d31b63ce6d36b71358af96f49b2033f6b4efd345642213410e6d3ef710633ab2cb0e831045331b7640e2
50c77ec60fa144917387091b7c9f9977883c873ca0786bbaef136ca4fb6c35b8070aab535a1588bc324f2cb9bc8e9951bf83059d20aca4061a80a1eb1189cf14
f93579f7ff3b7907113dfde1856545ef47d2ed8e8d7c5c50ccdb09b1de4d37d6247c1b6e5db803968cc987afdb5d348fef60b855369bd747d9fe28dbeeff5eb6
b7ddcfef5fac57fa0cd22db7ade9765d6ddea3ad7bf709a174201614ef71b57de7d095c67d189476eab915e7cf72b3100ee59d0c1318b86982948d9330f10511
e1204433d8e3975de964ca33d753eecc1887adbf1ab6fa96783a8ff6d9387d642d97e5e3692a1e1c89d578c9cfc7e17143a4e85a7df51896bb576ca7ea717949
40da5e8484369949a26a21515f0eca20a98773089a85845ad97b61d1b4b06848f7cb546db0006a795660dbe4c066abe5fa1e9880113c55218ac7324f69aa97d9
55c97c9f99de164ca302600fb1ac8055a69b92ebd6e5c9d5a5a5768e4c1b24b4723349a8c8a81ec64334c65975cad1f3d0b868ae9bab941af46428d47c505a2b
1af5c6bb585c36d760b7ae0d34d69582c6ce71cbad557d2899119ab5dc093cfac3613483dae172bb8be814de9f8d4492def097519659c24517f1300db8129d54
0d222270e25012b55cb9fc3c0d34561aa2b8952b20081f2cb926c8ca87460e926e26194f267824f4b46b2332d2e929287caa15d6abcafcf26069c9e690ee4138
3e760ee83cb98ba0c4fc7a5906704c38bc012aa7d11c1378a5990bd9aafed61a5326bbfa3b455543e938a2b310651d4517f314aea43ca7a3cef2186867d99a21
a05a48b2467830950d560faad14df3ae9172d8da75cf369291d34473d5330d55915dd3ae62c60ccb36b016cbcb35798dd532c4a0697a874fa57b5d729b4bad5b
db27e45d02029ec7cfd275cfd110346aabc90c6a92f1a60c4bcdce46cddeb15ce019d4ced32434d5af2dddaec52def11d6e960f0529d1fecd6ab168626cb7da5
8ab4faf6a17f9e60070f413cbaf022784e0557a9848f0f09820dd140ed4952d9805be491c86e0d3872e60969b98f4b7edb0b2a7e502835fc5ec1ab7aa542c36f
570b6ddfaf967b7eb9d4ed549e4063116154f6d3ef2e7d780d4517d9d71735bef105265abe69bb32625191a92f2c45455c7d812957b67f81710888cee35aa5df
ac363bb542b3daee17bc6ea7516806b54ea15b0beadd7e37f01bcdfe13d7395260af5d0dbc5aaf51a89583a0e0d54a927ea359a87b954adbabb71b3daffd24db
c6c0ca53f9c86201e155bc76ff050000ffff0300504b0304140006000800000021000dd1909fb60000001b010000270000007468656d652f7468656d652f5f72
656c732f7468656d654d616e616765722e786d6c2e72656c73848f4d0ac2301484f78277086f6fd3ba109126dd88d0add40384e4350d363f2451eced0dae2c08
2e8761be9969bb979dc9136332de3168aa1a083ae995719ac16db8ec8e4052164e89d93b64b060828e6f37ed1567914b284d262452282e3198720e274a939cd0
8a54f980ae38a38f56e422a3a641c8bbd048f7757da0f19b017cc524bd62107bd5001996509affb3fd381a89672f1f165dfe514173d9850528a2c6cce0239baa
4c04ca5bbabac4df000000ffff0300504b01022d0014000600080000002100e9de0fbfff0000001c0200001300000000000000000000000000000000005b436f
6e74656e745f54797065735d2e786d6c504b01022d0014000600080000002100a5d6a7e7c0000000360100000b00000000000000000000000000300100005f72
656c732f2e72656c73504b01022d00140006000800000021006b799616830000008a0000001c00000000000000000000000000190200007468656d652f746865
6d652f7468656d654d616e616765722e786d6c504b01022d001400060008000000210007b740aaca0600008f1a00001600000000000000000000000000d60200
007468656d652f7468656d652f7468656d65312e786d6c504b01022d00140006000800000021000dd1909fb60000001b01000027000000000000000000000000
00d40900007468656d652f7468656d652f5f72656c732f7468656d654d616e616765722e786d6c2e72656c73504b050600000000050005005d010000cf0a00000000}
{\*\colorschememapping 3c3f786d6c2076657273696f6e3d22312e302220656e636f64696e673d225554462d3822207374616e64616c6f6e653d22796573223f3e0d0a3c613a636c724d
617020786d6c6e733a613d22687474703a2f2f736368656d61732e6f70656e786d6c666f726d6174732e6f72672f64726177696e676d6c2f323030362f6d6169
6e22206267313d226c743122207478313d22646b3122206267323d226c743222207478323d22646b322220616363656e74313d22616363656e74312220616363
656e74323d22616363656e74322220616363656e74333d22616363656e74332220616363656e74343d22616363656e74342220616363656e74353d22616363656e74352220616363656e74363d22616363656e74362220686c696e6b3d22686c696e6b2220666f6c486c696e6b3d22666f6c486c696e6b222f3e}
{\*\latentstyles\lsdstimax371\lsdlockeddef0\lsdsemihiddendef0\lsdunhideuseddef0\lsdqformatdef0\lsdprioritydef99{\lsdlockedexcept \lsdqformat1 \lsdpriority0 \lsdlocked0 Normal;\lsdqformat1 \lsdpriority9 \lsdlocked0 heading 1;
\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 2;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 3;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 4;
\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 5;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 6;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 7;
\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 8;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority9 \lsdlocked0 heading 9;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 1;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 5;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 6;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 7;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 8;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index 9;
\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 1;\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 2;\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 3;
\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 4;\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 5;\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 6;
\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 7;\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 8;\lsdsemihidden1 \lsdunhideused1 \lsdpriority39 \lsdlocked0 toc 9;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Normal Indent;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 footnote text;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 annotation text;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 header;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 footer;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 index heading;\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority35 \lsdlocked0 caption;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 table of figures;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 envelope address;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 envelope return;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 footnote reference;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 annotation reference;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 line number;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 page number;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 endnote reference;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 endnote text;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 table of authorities;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 macro;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 toa heading;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Bullet;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Number;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List 3;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List 5;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Bullet 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Bullet 3;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Bullet 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Bullet 5;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Number 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Number 3;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Number 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Number 5;\lsdqformat1 \lsdpriority10 \lsdlocked0 Title;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Closing;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Signature;\lsdsemihidden1 \lsdunhideused1 \lsdpriority1 \lsdlocked0 Default Paragraph Font;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text Indent;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Continue;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Continue 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Continue 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Continue 4;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 List Continue 5;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Message Header;\lsdqformat1 \lsdpriority11 \lsdlocked0 Subtitle;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Salutation;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Date;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text First Indent;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text First Indent 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Note Heading;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text Indent 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Body Text Indent 3;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Block Text;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Hyperlink;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 FollowedHyperlink;\lsdqformat1 \lsdpriority22 \lsdlocked0 Strong;
\lsdqformat1 \lsdpriority20 \lsdlocked0 Emphasis;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Document Map;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Plain Text;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 E-mail Signature;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Top of Form;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Bottom of Form;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Normal (Web);\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Acronym;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Address;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Cite;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Code;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Definition;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Keyboard;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Preformatted;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Sample;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Typewriter;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 HTML Variable;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Normal Table;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 annotation subject;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 No List;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Outline List 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Outline List 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Outline List 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Simple 1;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Simple 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Simple 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Classic 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Classic 2;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Classic 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Classic 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Colorful 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Colorful 2;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Colorful 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Columns 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Columns 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Columns 3;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Columns 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Columns 5;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 2;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 5;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 6;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 7;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Grid 8;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 2;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 4;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 5;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 6;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 7;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table List 8;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table 3D effects 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table 3D effects 2;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table 3D effects 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Contemporary;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Elegant;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Professional;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Subtle 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Subtle 2;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Web 1;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Web 2;
\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Web 3;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Balloon Text;\lsdpriority39 \lsdlocked0 Table Grid;\lsdsemihidden1 \lsdunhideused1 \lsdlocked0 Table Theme;\lsdsemihidden1 \lsdlocked0 Placeholder Text;
\lsdqformat1 \lsdpriority1 \lsdlocked0 No Spacing;\lsdpriority60 \lsdlocked0 Light Shading;\lsdpriority61 \lsdlocked0 Light List;\lsdpriority62 \lsdlocked0 Light Grid;\lsdpriority63 \lsdlocked0 Medium Shading 1;\lsdpriority64 \lsdlocked0 Medium Shading 2;
\lsdpriority65 \lsdlocked0 Medium List 1;\lsdpriority66 \lsdlocked0 Medium List 2;\lsdpriority67 \lsdlocked0 Medium Grid 1;\lsdpriority68 \lsdlocked0 Medium Grid 2;\lsdpriority69 \lsdlocked0 Medium Grid 3;\lsdpriority70 \lsdlocked0 Dark List;
\lsdpriority71 \lsdlocked0 Colorful Shading;\lsdpriority72 \lsdlocked0 Colorful List;\lsdpriority73 \lsdlocked0 Colorful Grid;\lsdpriority60 \lsdlocked0 Light Shading Accent 1;\lsdpriority61 \lsdlocked0 Light List Accent 1;
\lsdpriority62 \lsdlocked0 Light Grid Accent 1;\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 1;\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 1;\lsdpriority65 \lsdlocked0 Medium List 1 Accent 1;\lsdsemihidden1 \lsdlocked0 Revision;
\lsdqformat1 \lsdpriority34 \lsdlocked0 List Paragraph;\lsdqformat1 \lsdpriority29 \lsdlocked0 Quote;\lsdqformat1 \lsdpriority30 \lsdlocked0 Intense Quote;\lsdpriority66 \lsdlocked0 Medium List 2 Accent 1;\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 1;
\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 1;\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 1;\lsdpriority70 \lsdlocked0 Dark List Accent 1;\lsdpriority71 \lsdlocked0 Colorful Shading Accent 1;\lsdpriority72 \lsdlocked0 Colorful List Accent 1;
\lsdpriority73 \lsdlocked0 Colorful Grid Accent 1;\lsdpriority60 \lsdlocked0 Light Shading Accent 2;\lsdpriority61 \lsdlocked0 Light List Accent 2;\lsdpriority62 \lsdlocked0 Light Grid Accent 2;\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 2;
\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 2;\lsdpriority65 \lsdlocked0 Medium List 1 Accent 2;\lsdpriority66 \lsdlocked0 Medium List 2 Accent 2;\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 2;\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 2;
\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 2;\lsdpriority70 \lsdlocked0 Dark List Accent 2;\lsdpriority71 \lsdlocked0 Colorful Shading Accent 2;\lsdpriority72 \lsdlocked0 Colorful List Accent 2;\lsdpriority73 \lsdlocked0 Colorful Grid Accent 2;
\lsdpriority60 \lsdlocked0 Light Shading Accent 3;\lsdpriority61 \lsdlocked0 Light List Accent 3;\lsdpriority62 \lsdlocked0 Light Grid Accent 3;\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 3;\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 3;
\lsdpriority65 \lsdlocked0 Medium List 1 Accent 3;\lsdpriority66 \lsdlocked0 Medium List 2 Accent 3;\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 3;\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 3;\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 3;
\lsdpriority70 \lsdlocked0 Dark List Accent 3;\lsdpriority71 \lsdlocked0 Colorful Shading Accent 3;\lsdpriority72 \lsdlocked0 Colorful List Accent 3;\lsdpriority73 \lsdlocked0 Colorful Grid Accent 3;\lsdpriority60 \lsdlocked0 Light Shading Accent 4;
\lsdpriority61 \lsdlocked0 Light List Accent 4;\lsdpriority62 \lsdlocked0 Light Grid Accent 4;\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 4;\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 4;\lsdpriority65 \lsdlocked0 Medium List 1 Accent 4;
\lsdpriority66 \lsdlocked0 Medium List 2 Accent 4;\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 4;\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 4;\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 4;\lsdpriority70 \lsdlocked0 Dark List Accent 4;
\lsdpriority71 \lsdlocked0 Colorful Shading Accent 4;\lsdpriority72 \lsdlocked0 Colorful List Accent 4;\lsdpriority73 \lsdlocked0 Colorful Grid Accent 4;\lsdpriority60 \lsdlocked0 Light Shading Accent 5;\lsdpriority61 \lsdlocked0 Light List Accent 5;
\lsdpriority62 \lsdlocked0 Light Grid Accent 5;\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 5;\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 5;\lsdpriority65 \lsdlocked0 Medium List 1 Accent 5;\lsdpriority66 \lsdlocked0 Medium List 2 Accent 5;
\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 5;\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 5;\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 5;\lsdpriority70 \lsdlocked0 Dark List Accent 5;\lsdpriority71 \lsdlocked0 Colorful Shading Accent 5;
\lsdpriority72 \lsdlocked0 Colorful List Accent 5;\lsdpriority73 \lsdlocked0 Colorful Grid Accent 5;\lsdpriority60 \lsdlocked0 Light Shading Accent 6;\lsdpriority61 \lsdlocked0 Light List Accent 6;\lsdpriority62 \lsdlocked0 Light Grid Accent 6;
\lsdpriority63 \lsdlocked0 Medium Shading 1 Accent 6;\lsdpriority64 \lsdlocked0 Medium Shading 2 Accent 6;\lsdpriority65 \lsdlocked0 Medium List 1 Accent 6;\lsdpriority66 \lsdlocked0 Medium List 2 Accent 6;
\lsdpriority67 \lsdlocked0 Medium Grid 1 Accent 6;\lsdpriority68 \lsdlocked0 Medium Grid 2 Accent 6;\lsdpriority69 \lsdlocked0 Medium Grid 3 Accent 6;\lsdpriority70 \lsdlocked0 Dark List Accent 6;\lsdpriority71 \lsdlocked0 Colorful Shading Accent 6;
\lsdpriority72 \lsdlocked0 Colorful List Accent 6;\lsdpriority73 \lsdlocked0 Colorful Grid Accent 6;\lsdqformat1 \lsdpriority19 \lsdlocked0 Subtle Emphasis;\lsdqformat1 \lsdpriority21 \lsdlocked0 Intense Emphasis;
\lsdqformat1 \lsdpriority31 \lsdlocked0 Subtle Reference;\lsdqformat1 \lsdpriority32 \lsdlocked0 Intense Reference;\lsdqformat1 \lsdpriority33 \lsdlocked0 Book Title;\lsdsemihidden1 \lsdunhideused1 \lsdpriority37 \lsdlocked0 Bibliography;
\lsdsemihidden1 \lsdunhideused1 \lsdqformat1 \lsdpriority39 \lsdlocked0 TOC Heading;\lsdpriority41 \lsdlocked0 Plain Table 1;\lsdpriority42 \lsdlocked0 Plain Table 2;\lsdpriority43 \lsdlocked0 Plain Table 3;\lsdpriority44 \lsdlocked0 Plain Table 4;
\lsdpriority45 \lsdlocked0 Plain Table 5;\lsdpriority40 \lsdlocked0 Grid Table Light;\lsdpriority46 \lsdlocked0 Grid Table 1 Light;\lsdpriority47 \lsdlocked0 Grid Table 2;\lsdpriority48 \lsdlocked0 Grid Table 3;\lsdpriority49 \lsdlocked0 Grid Table 4;
\lsdpriority50 \lsdlocked0 Grid Table 5 Dark;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful;\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful;\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 1;\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 1;
\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 1;\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 1;\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 1;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 1;
\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 1;\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 2;\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 2;\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 2;
\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 2;\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 2;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 2;\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 2;
\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 3;\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 3;\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 3;\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 3;
\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 3;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 3;\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 3;\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 4;
\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 4;\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 4;\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 4;\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 4;
\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 4;\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 4;\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 5;\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 5;
\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 5;\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 5;\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 5;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 5;
\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 5;\lsdpriority46 \lsdlocked0 Grid Table 1 Light Accent 6;\lsdpriority47 \lsdlocked0 Grid Table 2 Accent 6;\lsdpriority48 \lsdlocked0 Grid Table 3 Accent 6;
\lsdpriority49 \lsdlocked0 Grid Table 4 Accent 6;\lsdpriority50 \lsdlocked0 Grid Table 5 Dark Accent 6;\lsdpriority51 \lsdlocked0 Grid Table 6 Colorful Accent 6;\lsdpriority52 \lsdlocked0 Grid Table 7 Colorful Accent 6;
\lsdpriority46 \lsdlocked0 List Table 1 Light;\lsdpriority47 \lsdlocked0 List Table 2;\lsdpriority48 \lsdlocked0 List Table 3;\lsdpriority49 \lsdlocked0 List Table 4;\lsdpriority50 \lsdlocked0 List Table 5 Dark;
\lsdpriority51 \lsdlocked0 List Table 6 Colorful;\lsdpriority52 \lsdlocked0 List Table 7 Colorful;\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 1;\lsdpriority47 \lsdlocked0 List Table 2 Accent 1;\lsdpriority48 \lsdlocked0 List Table 3 Accent 1;
\lsdpriority49 \lsdlocked0 List Table 4 Accent 1;\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 1;\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 1;\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 1;
\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 2;\lsdpriority47 \lsdlocked0 List Table 2 Accent 2;\lsdpriority48 \lsdlocked0 List Table 3 Accent 2;\lsdpriority49 \lsdlocked0 List Table 4 Accent 2;
\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 2;\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 2;\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 2;\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 3;
\lsdpriority47 \lsdlocked0 List Table 2 Accent 3;\lsdpriority48 \lsdlocked0 List Table 3 Accent 3;\lsdpriority49 \lsdlocked0 List Table 4 Accent 3;\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 3;
\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 3;\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 3;\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 4;\lsdpriority47 \lsdlocked0 List Table 2 Accent 4;
\lsdpriority48 \lsdlocked0 List Table 3 Accent 4;\lsdpriority49 \lsdlocked0 List Table 4 Accent 4;\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 4;\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 4;
\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 4;\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 5;\lsdpriority47 \lsdlocked0 List Table 2 Accent 5;\lsdpriority48 \lsdlocked0 List Table 3 Accent 5;
\lsdpriority49 \lsdlocked0 List Table 4 Accent 5;\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 5;\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 5;\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 5;
\lsdpriority46 \lsdlocked0 List Table 1 Light Accent 6;\lsdpriority47 \lsdlocked0 List Table 2 Accent 6;\lsdpriority48 \lsdlocked0 List Table 3 Accent 6;\lsdpriority49 \lsdlocked0 List Table 4 Accent 6;
\lsdpriority50 \lsdlocked0 List Table 5 Dark Accent 6;\lsdpriority51 \lsdlocked0 List Table 6 Colorful Accent 6;\lsdpriority52 \lsdlocked0 List Table 7 Colorful Accent 6;}}{\*\datastore 010500000200000018000000
4d73786d6c322e534158584d4c5265616465722e362e3000000000000000000000060000
d0cf11e0a1b11ae1000000000000000000000000000000003e000300feff090006000000000000000000000001000000010000000000000000100000feffffff00000000feffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffdfffffffeffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffff52006f006f007400200045006e00740072007900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000016000500ffffffffffffffffffffffff0c6ad98892f1d411a65f0040963251e50000000000000000000000003024
acedb27dd501feffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff00000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff0000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000ffffffffffffffffffffffff000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000105000000000000}}